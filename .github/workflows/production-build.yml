name: Deploy Strapi build

on:
  push:
    branches: ['production']
  workflow_dispatch:

jobs:
  configure:
    runs-on: ubuntu-latest
    environment: Production
    permissions:
      contents: read
      deployments: write
    name: Create config file
    steps:
      - name: Create env file
        run: |
          touch .env

      - name: Configure Server
        run: |
          echo "HOST=0.0.0.0" >> .env
          echo "PORT=1337" >> .env

      - name: Configure Secrets
        run: |
          echo "APP_KEYS=${{ secrets.APP_KEYS }}" >> .env
          echo "API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}" >> .env
          echo "ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}" >> .env
          echo "TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

      - name: Configure DataBase
        run: |
          echo "DATABASE_CLIENT=${{ secrets.DATABASE_CLIENT }}" >> .env
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_SSL=${{ secrets.DATABASE_SSL }}" >> .env
          echo "DATABASE_FILENAME=${{ secrets.DATABASE_FILENAME }}" >> .env

      - name: Configure Cloudflare R2 & CDN
        run: |
          echo "CF_ACCESS_KEY_ID=${{ secrets.CF_ACCESS_KEY_ID }}" >> .env
          echo "CF_ACCESS_SECRET=${{ secrets.CF_ACCESS_SECRET }}" >> .env
          echo "CF_PUBLIC_ACCESS_URL=${{ secrets.CF_PUBLIC_ACCESS_URL }}" >> .env
          echo "CF_BUCKET=${{ secrets.CF_BUCKET }}" >> .env
          echo "CF_ENDPOINT=${{ secrets.CF_ENDPOINT }}" >> .env

      - name: Upload .env file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: env-file
          path: .env

      - name: Dump database postgres sql
        run: pg_dump -h 127.0.0.1 -p 5432 -U ${{ secrets.DATABASE_USERNAME }} -d ${{secrets.DATABASE_NAME}}  -f backup.sql

      - name: Upload backup as artifact
        uses: actions/upload-artifact@v4
        with:
          name: backup
          path: backup.sql

  build:
    runs-on: ubuntu-latest
    needs: configure
    environment: Production
    name: Strapi deployment
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download .env file
        uses: actions/download-artifact@v4
        with:
          name: env-file

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/strapi-api:prod

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/strapi-api:prod
            docker stop strapi-api:prod || true
            docker rm strapi-api:prod || true
            docker run -d --name strapi-api:prod -p 1337:1337 --env-file .env ${{ secrets.DOCKERHUB_USERNAME }}/strapi-api:prod
