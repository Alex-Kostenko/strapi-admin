{
  "version": 3,
  "sources": ["../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/utils/getFetchClient.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/utils/baseQuery.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/services/api.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/utils/urls.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/services/admin.ts"],
  "sourcesContent": ["import pipe from 'lodash/fp/pipe';\nimport qs from 'qs';\n\nimport type { ApiError } from '../hooks/useAPIErrorHandler';\n\nconst STORAGE_KEYS = {\n  TOKEN: 'jwtToken',\n  USER: 'userInfo',\n};\n\ntype FetchResponse<TData = any> = {\n  data: TData;\n  status?: number;\n};\n\ntype FetchOptions = {\n  params?: any;\n  signal?: AbortSignal;\n  headers?: Record<string, string>;\n  validateStatus?: ((status: number) => boolean) | null;\n};\n\ntype FetchConfig = {\n  signal?: AbortSignal;\n};\n\ninterface ErrorResponse {\n  data: {\n    data?: any;\n    error: ApiError & { status?: number };\n  };\n}\n\nclass FetchError extends Error {\n  public name: string;\n  public message: string;\n  public response?: ErrorResponse;\n  public code?: number;\n  public status?: number;\n\n  constructor(message: string, response?: ErrorResponse) {\n    super(message);\n    this.name = 'FetchError';\n    this.message = message;\n    this.response = response;\n    this.code = response?.data?.error?.status;\n    this.status = response?.data?.error?.status;\n\n    // Ensure correct stack trace in error object\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, FetchError);\n    }\n  }\n}\n\nconst isFetchError = (error: unknown): error is FetchError => {\n  return error instanceof FetchError;\n};\n\nconst getToken = () =>\n  JSON.parse(\n    localStorage.getItem(STORAGE_KEYS.TOKEN) ?? sessionStorage.getItem(STORAGE_KEYS.TOKEN) ?? '\"\"'\n  );\n\ntype FetchClient = {\n  get: <TData = any>(url: string, config?: FetchOptions) => Promise<FetchResponse<TData>>;\n  put: <TData = any, TSend = any>(\n    url: string,\n    data?: TSend,\n    config?: FetchOptions\n  ) => Promise<FetchResponse<TData>>;\n  post: <TData = any, TSend = any>(\n    url: string,\n    data?: TSend,\n    config?: FetchOptions\n  ) => Promise<FetchResponse<TData>>;\n  del: <TData = any>(url: string, config?: FetchOptions) => Promise<FetchResponse<TData>>;\n};\n\n/**\n * @public\n * @param {FetchConfig} [defaultOptions={}] - Fetch Configs.\n * @returns {FetchClient} A fetch client object with methods for making HTTP requests.\n * @description This is an abstraction around the native fetch exposed by a function. It provides a simple interface to handle API calls\n * to the Strapi backend.\n * @example\n * ```tsx\n * import { getFetchClient } from '@strapi/admin/admin';\n *\n * const myFunct = () => {\n *   const { get } = getFetchClient();\n *   const requestURL = \"/some-endpoint\";\n *\n *   const { data } = await get(requestURL);\n *\n *   return data;\n * };\n * ```\n */\nconst getFetchClient = (defaultOptions: FetchConfig = {}): FetchClient => {\n  const backendURL = window.strapi.backendURL;\n  const defaultHeader = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${getToken()}`,\n  };\n\n  const isFormDataRequest = (body: unknown) => body instanceof FormData;\n  const addPrependingSlash = (url: string) => (url.charAt(0) !== '/' ? `/${url}` : url);\n\n  // This regular expression matches a string that starts with either \"http://\" or \"https://\" or any other protocol name in lower case letters, followed by \"://\" and ends with anything else\n  const hasProtocol = (url: string) => new RegExp('^(?:[a-z+]+:)?//', 'i').test(url);\n\n  // Check if the url has a prepending slash, if not add a slash\n  const normalizeUrl = (url: string) => (hasProtocol(url) ? url : addPrependingSlash(url));\n\n  // Add a response interceptor to return the response\n  const responseInterceptor = async <TData = any>(\n    response: Response,\n    validateStatus?: FetchOptions['validateStatus']\n  ): Promise<FetchResponse<TData>> => {\n    try {\n      const result = await response.json();\n\n      /**\n       * validateStatus allows us to customize when a response should throw an error\n       * In native Fetch API, a response is considered \"not ok\"\n       * when the status code falls in the 200 to 299 (inclusive) range\n       */\n      if (!response.ok && result.error && !validateStatus?.(response.status)) {\n        throw new FetchError(result.error.message, { data: result });\n      }\n\n      if (!response.ok && !validateStatus?.(response.status)) {\n        throw new FetchError('Unknown Server Error');\n      }\n\n      return { data: result };\n    } catch (error) {\n      if (error instanceof SyntaxError && response.ok) {\n        // Making sure that a SyntaxError doesn't throw if it's successful\n        return { data: [], status: response.status } as FetchResponse<any>;\n      } else {\n        throw error;\n      }\n    }\n  };\n\n  const paramsSerializer =\n    <Param = unknown>(params?: Param) =>\n    (url: string) => {\n      if (params) {\n        const serializedParams = qs.stringify(params, { encode: false });\n        return `${url}?${serializedParams}`;\n      }\n      return url;\n    };\n\n  const addBaseUrl = (url: Parameters<typeof fetch>[0]) => {\n    return `${backendURL}${url}`;\n  };\n\n  /**\n   * We use the factory method because the options\n   * are unique to the individual request\n   */\n  const makeCreateRequestUrl = (options?: FetchOptions) =>\n    pipe(normalizeUrl, addBaseUrl, paramsSerializer(options?.params));\n\n  const fetchClient: FetchClient = {\n    get: async <TData>(url: string, options?: FetchOptions): Promise<FetchResponse<TData>> => {\n      const headers = new Headers({\n        ...defaultHeader,\n        ...options?.headers,\n      });\n      /**\n       * this applies all our transformations to the URL\n       * - normalizing (making sure it has the correct slash)\n       * - appending our BaseURL which comes from the window.strapi object\n       * - serializing our params with QS\n       */\n      const createRequestUrl = makeCreateRequestUrl(options);\n      const response = await fetch(createRequestUrl(url), {\n        signal: options?.signal ?? defaultOptions.signal,\n        method: 'GET',\n        headers,\n      });\n\n      return responseInterceptor<TData>(response, options?.validateStatus);\n    },\n    post: async <TData, TSend = any>(\n      url: string,\n      data?: TSend,\n      options?: FetchOptions\n    ): Promise<FetchResponse<TData>> => {\n      const headers = new Headers({\n        ...defaultHeader,\n        ...options?.headers,\n      });\n\n      const createRequestUrl = makeCreateRequestUrl(options);\n\n      /**\n       * we have to remove the Content-Type value if it was a formData request\n       * the browser will automatically set the header value\n       */\n      if (isFormDataRequest(data)) {\n        headers.delete('Content-Type');\n      }\n\n      const response = await fetch(createRequestUrl(url), {\n        signal: options?.signal ?? defaultOptions.signal,\n        method: 'POST',\n        headers,\n        body: isFormDataRequest(data) ? (data as FormData) : JSON.stringify(data),\n      });\n      return responseInterceptor<TData>(response, options?.validateStatus);\n    },\n    put: async <TData, TSend = any>(\n      url: string,\n      data?: TSend,\n      options?: FetchOptions\n    ): Promise<FetchResponse<TData>> => {\n      const headers = new Headers({\n        ...defaultHeader,\n        ...options?.headers,\n      });\n\n      const createRequestUrl = makeCreateRequestUrl(options);\n\n      /**\n       * we have to remove the Content-Type value if it was a formData request\n       * the browser will automatically set the header value\n       */\n      if (isFormDataRequest(data)) {\n        headers.delete('Content-Type');\n      }\n\n      const response = await fetch(createRequestUrl(url), {\n        signal: options?.signal ?? defaultOptions.signal,\n        method: 'PUT',\n        headers,\n        body: isFormDataRequest(data) ? (data as FormData) : JSON.stringify(data),\n      });\n\n      return responseInterceptor<TData>(response, options?.validateStatus);\n    },\n    del: async <TData>(url: string, options?: FetchOptions): Promise<FetchResponse<TData>> => {\n      const headers = new Headers({\n        ...defaultHeader,\n        ...options?.headers,\n      });\n\n      const createRequestUrl = makeCreateRequestUrl(options);\n      const response = await fetch(createRequestUrl(url), {\n        signal: options?.signal ?? defaultOptions.signal,\n        method: 'DELETE',\n        headers,\n      });\n      return responseInterceptor<TData>(response, options?.validateStatus);\n    },\n  };\n\n  return fetchClient;\n};\n\nexport { getFetchClient, isFetchError, FetchError };\nexport type { FetchOptions, FetchResponse, FetchConfig, FetchClient, ErrorResponse };\n", "import { SerializedError } from '@reduxjs/toolkit';\nimport { BaseQueryFn } from '@reduxjs/toolkit/query';\n\nimport { getFetchClient, isFetchError, type FetchOptions } from '../utils/getFetchClient';\n\nimport type { ApiError } from '../hooks/useAPIErrorHandler';\n\ninterface QueryArguments {\n  url: string;\n  method?: 'GET' | 'POST' | 'DELETE' | 'PUT';\n  data?: unknown;\n  config?: FetchOptions;\n}\n\ninterface UnknownApiError {\n  name: 'UnknownError';\n  message: string;\n  details?: unknown;\n  status?: number;\n}\n\ntype BaseQueryError = ApiError | UnknownApiError;\n\nconst fetchBaseQuery =\n  (): BaseQueryFn<string | QueryArguments, unknown, BaseQueryError> =>\n  async (query, { signal }) => {\n    try {\n      const { get, post, del, put } = getFetchClient();\n\n      if (typeof query === 'string') {\n        const result = await get(query, { signal });\n        return { data: result.data };\n      } else {\n        const { url, method = 'GET', data, config } = query;\n\n        if (method === 'POST') {\n          const result = await post(url, data, {\n            ...config,\n            signal,\n          });\n          return { data: result.data };\n        }\n\n        if (method === 'DELETE') {\n          const result = await del(url, {\n            ...config,\n            signal,\n          });\n          return { data: result.data };\n        }\n\n        if (method === 'PUT') {\n          const result = await put(url, data, {\n            ...config,\n            signal,\n          });\n          return { data: result.data };\n        }\n\n        /**\n         * Default is GET.\n         */\n        const result = await get(url, {\n          ...config,\n          signal,\n        });\n        return { data: result.data };\n      }\n    } catch (err) {\n      // Handle error of type FetchError\n\n      if (isFetchError(err)) {\n        if (\n          typeof err.response?.data === 'object' &&\n          err.response?.data !== null &&\n          'error' in err.response?.data\n        ) {\n          /**\n           * This will most likely be ApiError\n           */\n          return { data: undefined, error: err.response?.data.error as any };\n        } else {\n          return {\n            data: undefined,\n            error: {\n              name: 'UnknownError',\n              message: err.message,\n              details: err.response,\n              status: err.status,\n            } as UnknownApiError,\n          };\n        }\n      }\n\n      const error = err as Error;\n      return {\n        data: undefined,\n        error: {\n          name: error.name,\n          message: error.message,\n          stack: error.stack,\n        } satisfies SerializedError,\n      };\n    }\n  };\n\nconst isBaseQueryError = (error: BaseQueryError | SerializedError): error is BaseQueryError => {\n  return error.name !== undefined;\n};\n\nexport { fetchBaseQuery, isBaseQueryError };\nexport type { BaseQueryError, UnknownApiError, QueryArguments };\n", "import { createApi } from '@reduxjs/toolkit/query/react';\n\nimport { fetchBaseQuery } from '../utils/baseQuery';\n\n/**\n * @public\n * @description This is the redux toolkit api for the admin panel, users\n * should use a combination of `enhanceEndpoints` to add their TagTypes\n * to utilise in their `injectEndpoints` construction for automatic cache\n * re-validation. We specifically do not store any tagTypes by default leaving\n * the API surface as small as possible. None of the data-fetching looks for the\n * StrapiApp are stored here either.\n */\nconst adminApi = createApi({\n  reducerPath: 'adminApi',\n  baseQuery: fetchBaseQuery(),\n  tagTypes: [],\n  endpoints: () => ({}),\n});\n\nexport { adminApi };\n", "const prefixFileUrlWithBackendUrl = (fileURL?: string): string | undefined => {\n  return !!fileURL && fileURL.startsWith('/') ? `${window.strapi.backendURL}${fileURL}` : fileURL;\n};\n\n/**\n * @description Creates an absolute URL, if there is no URL or it\n * is relative, we use the `window.location.origin` as a fallback.\n * IF it's an absolute URL, we return it as is.\n */\nconst createAbsoluteUrl = (url?: string): string => {\n  if (!url) {\n    return window.location.origin;\n  }\n  if (url.startsWith('/')) {\n    /**\n     * This will also manage protocol relative URLs which is fine because\n     * as we can see from the test, we still get the expected result.\n     */\n    return new URL(url, window.location.origin).toString();\n  } else {\n    return url;\n  }\n};\n\nexport { createAbsoluteUrl, prefixFileUrlWithBackendUrl };\n", "import {\n  type TelemetryProperties,\n  type Init,\n  type Information,\n  type GetProjectSettings,\n  type UpdateProjectSettings,\n  type Plugins,\n  type GetLicenseLimitInformation,\n} from '../../../shared/contracts/admin';\nimport { prefixFileUrlWithBackendUrl } from '../utils/urls';\n\nimport { adminApi } from './api';\n\ninterface ConfigurationLogo {\n  custom?: {\n    name?: string;\n    url?: string;\n  };\n  default: string;\n}\n\nconst admin = adminApi\n  .enhanceEndpoints({\n    addTagTypes: ['ProjectSettings', 'LicenseLimits'],\n  })\n  .injectEndpoints({\n    endpoints: (builder) => ({\n      init: builder.query<Init.Response['data'], void>({\n        query: () => ({\n          url: '/admin/init',\n          method: 'GET',\n        }),\n        transformResponse(res: Init.Response) {\n          return res.data;\n        },\n      }),\n      information: builder.query<Information.Response['data'], void>({\n        query: () => ({\n          url: '/admin/information',\n          method: 'GET',\n        }),\n        transformResponse(res: Information.Response) {\n          return res.data;\n        },\n      }),\n      telemetryProperties: builder.query<TelemetryProperties.Response['data'], void>({\n        query: () => ({\n          url: '/admin/telemetry-properties',\n          method: 'GET',\n          config: {\n            validateStatus: (status) => status < 500,\n          },\n        }),\n        transformResponse(res: TelemetryProperties.Response) {\n          return res.data;\n        },\n      }),\n      projectSettings: builder.query<\n        { authLogo?: ConfigurationLogo['custom']; menuLogo?: ConfigurationLogo['custom'] },\n        void\n      >({\n        query: () => ({\n          url: '/admin/project-settings',\n          method: 'GET',\n        }),\n        providesTags: ['ProjectSettings'],\n        transformResponse(data: GetProjectSettings.Response) {\n          return {\n            authLogo: data.authLogo\n              ? {\n                  name: data.authLogo.name,\n                  url: prefixFileUrlWithBackendUrl(data.authLogo.url),\n                }\n              : undefined,\n            menuLogo: data.menuLogo\n              ? {\n                  name: data.menuLogo.name,\n                  url: prefixFileUrlWithBackendUrl(data.menuLogo.url),\n                }\n              : undefined,\n          };\n        },\n      }),\n      updateProjectSettings: builder.mutation<UpdateProjectSettings.Response, FormData>({\n        query: (data) => ({\n          url: '/admin/project-settings',\n          method: 'POST',\n          data,\n          config: {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n            },\n          },\n        }),\n        invalidatesTags: ['ProjectSettings'],\n      }),\n      getPlugins: builder.query<Plugins.Response, void>({\n        query: () => ({\n          url: '/admin/plugins',\n          method: 'GET',\n        }),\n      }),\n      getLicenseLimits: builder.query<GetLicenseLimitInformation.Response, void>({\n        query: () => ({\n          url: '/admin/license-limit-information',\n          method: 'GET',\n        }),\n        providesTags: ['LicenseLimits'],\n      }),\n    }),\n    overrideExisting: false,\n  });\n\nconst {\n  useInitQuery,\n  useTelemetryPropertiesQuery,\n  useInformationQuery,\n  useProjectSettingsQuery,\n  useUpdateProjectSettingsMutation,\n  useGetPluginsQuery,\n  useGetLicenseLimitsQuery,\n} = admin;\n\nexport {\n  useInitQuery,\n  useTelemetryPropertiesQuery,\n  useInformationQuery,\n  useProjectSettingsQuery,\n  useUpdateProjectSettingsMutation,\n  useGetPluginsQuery,\n  useGetLicenseLimitsQuery,\n};\n\nexport type { ConfigurationLogo };\n"],
  "mappings": "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",
  "names": ["qs", "pipe", "result"]
}
