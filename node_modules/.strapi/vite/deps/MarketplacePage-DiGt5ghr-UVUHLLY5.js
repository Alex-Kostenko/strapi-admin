import {
  ContentBox,
  Layouts,
  Pagination,
  StrapiLogo,
  useClipboard
} from "./chunk-VPGTOWWY.js";
import {
  Page,
  useAppInfo,
  useNotification,
  useQueryParams,
  useTracking,
  useTypedSelector
} from "./chunk-J6CPTLIL.js";
import "./chunk-VH663WJU.js";
import {
  require_semver
} from "./chunk-JXQG57YH.js";
import "./chunk-JQ4X2NOR.js";
import {
  require_pluralize
} from "./chunk-O6QFUROF.js";
import {
  useQuery
} from "./chunk-QDWQTO65.js";
import "./chunk-2JZ35VNI.js";
import {
  ForwardRef$J,
  ForwardRef$v,
  ForwardRef$x
} from "./chunk-QWZY63MK.js";
import {
  Box,
  Button,
  Divider,
  Flex,
  Grid,
  LinkButton,
  Main,
  MultiSelect,
  MultiSelectOption,
  Popover,
  Searchbar,
  SingleSelect,
  SingleSelectOption,
  Tabs,
  Tag,
  TooltipImpl,
  Typography,
  require_lib,
  useIntl,
  useNotifyAT
} from "./chunk-4GWSCROJ.js";
import "./chunk-WHKY4GB5.js";
import "./chunk-IYHTQODQ.js";
import {
  ForwardRef$3F,
  ForwardRef$3J,
  ForwardRef$3V,
  ForwardRef$3d,
  ForwardRef$3t,
  ForwardRef$4n,
  ForwardRef$4p,
  ForwardRef$B,
  ForwardRef$d
} from "./chunk-DCJFY6LG.js";
import {
  dt
} from "./chunk-6VAEU2GM.js";
import {
  require_jsx_runtime
} from "./chunk-QBLEIVF7.js";
import {
  require_react
} from "./chunk-BCGHH3YY.js";
import {
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/@strapi/plugin-documentation/node_modules/@strapi/admin/dist/admin/MarketplacePage-DiGt5ghr.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var import_pluralize = __toESM(require_pluralize(), 1);
var semver = __toESM(require_semver(), 1);
var qs = __toESM(require_lib(), 1);
function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = React.useState(value);
  React.useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return debouncedValue;
}
var NpmPackagesFilters = ({
  handleSelectClear,
  handleSelectChange,
  npmPackageType,
  possibleCategories,
  possibleCollections,
  query
}) => {
  var _a, _b;
  const { formatMessage } = useIntl();
  const handleTagRemove = (tagToRemove, filterType) => {
    const update = {
      [filterType]: (query[filterType] ?? []).filter((previousTag) => previousTag !== tagToRemove)
    };
    handleSelectChange(update);
  };
  return (0, import_jsx_runtime.jsxs)(Popover.Root, { children: [
    (0, import_jsx_runtime.jsx)(Popover.Trigger, { children: (0, import_jsx_runtime.jsx)(Button, { variant: "tertiary", startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$3d, {}), children: formatMessage({ id: "app.utils.filters", defaultMessage: "Filters" }) }) }),
    (0, import_jsx_runtime.jsx)(Popover.Content, { sideOffset: 4, children: (0, import_jsx_runtime.jsxs)(Flex, { padding: 3, direction: "column", alignItems: "stretch", gap: 1, children: [
      (0, import_jsx_runtime.jsx)(
        FilterSelect,
        {
          message: formatMessage({
            id: "admin.pages.MarketPlacePage.filters.collections",
            defaultMessage: "Collections"
          }),
          value: (query == null ? void 0 : query.collections) || [],
          onChange: (newCollections) => {
            const update = { collections: newCollections };
            handleSelectChange(update);
          },
          onClear: () => handleSelectClear("collections"),
          possibleFilters: possibleCollections,
          customizeContent: (values) => formatMessage(
            {
              id: "admin.pages.MarketPlacePage.filters.collectionsSelected",
              defaultMessage: "{count, plural, =0 {No collections} one {# collection} other {# collections}} selected"
            },
            { count: (values == null ? void 0 : values.length) ?? 0 }
          )
        }
      ),
      npmPackageType === "plugin" && (0, import_jsx_runtime.jsx)(
        FilterSelect,
        {
          message: formatMessage({
            id: "admin.pages.MarketPlacePage.filters.categories",
            defaultMessage: "Categories"
          }),
          value: (query == null ? void 0 : query.categories) || [],
          onChange: (newCategories) => {
            const update = { categories: newCategories };
            handleSelectChange(update);
          },
          onClear: () => handleSelectClear("categories"),
          possibleFilters: possibleCategories,
          customizeContent: (values) => formatMessage(
            {
              id: "admin.pages.MarketPlacePage.filters.categoriesSelected",
              defaultMessage: "{count, plural, =0 {No categories} one {# category} other {# categories}} selected"
            },
            { count: (values == null ? void 0 : values.length) ?? 0 }
          )
        }
      )
    ] }) }),
    (_a = query.collections) == null ? void 0 : _a.map((collection) => (0, import_jsx_runtime.jsx)(Box, { padding: 1, children: (0, import_jsx_runtime.jsx)(Tag, { icon: (0, import_jsx_runtime.jsx)(ForwardRef$3V, {}), onClick: () => handleTagRemove(collection, "collections"), children: collection }) }, collection)),
    npmPackageType === "plugin" && ((_b = query.categories) == null ? void 0 : _b.map((category) => (0, import_jsx_runtime.jsx)(Box, { padding: 1, children: (0, import_jsx_runtime.jsx)(Tag, { icon: (0, import_jsx_runtime.jsx)(ForwardRef$3V, {}), onClick: () => handleTagRemove(category, "categories"), children: category }) }, category)))
  ] });
};
var FilterSelect = ({
  message,
  value,
  onChange,
  possibleFilters,
  onClear,
  customizeContent
}) => {
  return (0, import_jsx_runtime.jsx)(
    MultiSelect,
    {
      "data-testid": `${message}-button`,
      "aria-label": message,
      placeholder: message,
      onChange,
      onClear,
      value,
      customizeContent,
      children: Object.entries(possibleFilters).map(([filterName, count]) => {
        return (0, import_jsx_runtime.jsx)(
          MultiSelectOption,
          {
            "data-testid": `${filterName}-${count}`,
            value: filterName,
            children: `${filterName} (${count})`
          },
          filterName
        );
      })
    }
  );
};
var EllipsisText = dt(Typography)`
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  overflow: hidden;
`;
var NpmPackageCard = ({
  npmPackage,
  isInstalled,
  useYarn,
  isInDevelopmentMode,
  npmPackageType,
  strapiAppVersion
}) => {
  const { attributes } = npmPackage;
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const commandToCopy = useYarn ? `yarn add ${attributes.npmPackageName}` : `npm install ${attributes.npmPackageName}`;
  const madeByStrapiMessage = formatMessage({
    id: "admin.pages.MarketPlacePage.plugin.tooltip.madeByStrapi",
    defaultMessage: "Made by Strapi"
  });
  const npmPackageHref = `https://market.strapi.io/${import_pluralize.default.plural(npmPackageType)}/${attributes.slug}`;
  const versionRange = semver.validRange(attributes.strapiVersion);
  const isCompatible = versionRange ? semver.satisfies(strapiAppVersion ?? "", versionRange) : false;
  return (0, import_jsx_runtime.jsxs)(
    Flex,
    {
      direction: "column",
      justifyContent: "space-between",
      paddingTop: 4,
      paddingRight: 4,
      paddingBottom: 4,
      paddingLeft: 4,
      hasRadius: true,
      background: "neutral0",
      shadow: "tableShadow",
      height: "100%",
      alignItems: "normal",
      "data-testid": "npm-package-card",
      children: [
        (0, import_jsx_runtime.jsxs)(Box, { children: [
          (0, import_jsx_runtime.jsxs)(Flex, { direction: "row", justifyContent: "space-between", alignItems: "flex-start", children: [
            (0, import_jsx_runtime.jsx)(
              Box,
              {
                tag: "img",
                src: attributes.logo.url,
                alt: `${attributes.name} logo`,
                hasRadius: true,
                width: 11,
                height: 11
              }
            ),
            (0, import_jsx_runtime.jsx)(
              PackageStats,
              {
                githubStars: attributes.githubStars,
                npmDownloads: attributes.npmDownloads,
                npmPackageType
              }
            )
          ] }),
          (0, import_jsx_runtime.jsx)(Box, { paddingTop: 4, children: (0, import_jsx_runtime.jsx)(Typography, { tag: "h3", variant: "delta", children: (0, import_jsx_runtime.jsxs)(
            Flex,
            {
              alignItems: "center",
              gap: attributes.validated && !attributes.madeByStrapi ? 2 : 1,
              children: [
                attributes.name,
                attributes.validated && !attributes.madeByStrapi && (0, import_jsx_runtime.jsx)(
                  TooltipImpl,
                  {
                    description: formatMessage({
                      id: "admin.pages.MarketPlacePage.plugin.tooltip.verified",
                      defaultMessage: "Plugin verified by Strapi"
                    }),
                    children: (0, import_jsx_runtime.jsx)(ForwardRef$4n, { fill: "success600" })
                  }
                ),
                attributes.madeByStrapi && (0, import_jsx_runtime.jsx)(TooltipImpl, { description: madeByStrapiMessage, children: (0, import_jsx_runtime.jsx)(
                  Box,
                  {
                    tag: "img",
                    src: StrapiLogo,
                    alt: madeByStrapiMessage,
                    width: 6,
                    height: "auto"
                  }
                ) })
              ]
            }
          ) }) }),
          (0, import_jsx_runtime.jsx)(Box, { paddingTop: 2, children: (0, import_jsx_runtime.jsx)(EllipsisText, { tag: "p", variant: "omega", textColor: "neutral600", children: attributes.description }) })
        ] }),
        (0, import_jsx_runtime.jsxs)(Flex, { gap: 2, style: { alignSelf: "flex-end" }, paddingTop: 6, children: [
          (0, import_jsx_runtime.jsx)(
            LinkButton,
            {
              size: "S",
              href: npmPackageHref,
              isExternal: true,
              endIcon: (0, import_jsx_runtime.jsx)(ForwardRef$3t, {}),
              "aria-label": formatMessage(
                {
                  id: "admin.pages.MarketPlacePage.plugin.info.label",
                  defaultMessage: "Learn more about {pluginName}"
                },
                { pluginName: attributes.name }
              ),
              variant: "tertiary",
              onClick: () => trackUsage("didPluginLearnMore"),
              children: formatMessage({
                id: "admin.pages.MarketPlacePage.plugin.info.text",
                defaultMessage: "More"
              })
            }
          ),
          (0, import_jsx_runtime.jsx)(
            InstallPluginButton,
            {
              isInstalled,
              isInDevelopmentMode,
              isCompatible,
              commandToCopy,
              strapiAppVersion,
              strapiPeerDepVersion: attributes.strapiVersion,
              pluginName: attributes.name
            }
          )
        ] })
      ]
    }
  );
};
var InstallPluginButton = ({
  isInstalled,
  isInDevelopmentMode,
  isCompatible,
  commandToCopy,
  strapiAppVersion,
  strapiPeerDepVersion,
  pluginName
}) => {
  const { toggleNotification } = useNotification();
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const { copy } = useClipboard();
  const handleCopy = async () => {
    const didCopy = await copy(commandToCopy);
    if (didCopy) {
      trackUsage("willInstallPlugin");
      toggleNotification({
        type: "success",
        message: formatMessage({ id: "admin.pages.MarketPlacePage.plugin.copy.success" })
      });
    }
  };
  if (isInstalled) {
    return (0, import_jsx_runtime.jsxs)(Flex, { gap: 2, paddingLeft: 4, children: [
      (0, import_jsx_runtime.jsx)(ForwardRef$4p, { width: "1.2rem", height: "1.2rem", color: "success600" }),
      (0, import_jsx_runtime.jsx)(Typography, { variant: "omega", textColor: "success600", fontWeight: "bold", children: formatMessage({
        id: "admin.pages.MarketPlacePage.plugin.installed",
        defaultMessage: "Installed"
      }) })
    ] });
  }
  if (isInDevelopmentMode && isCompatible !== false) {
    return (0, import_jsx_runtime.jsx)(
      CardButton,
      {
        strapiAppVersion,
        strapiPeerDepVersion,
        handleCopy,
        pluginName
      }
    );
  }
  return null;
};
var CardButton = ({
  strapiPeerDepVersion,
  strapiAppVersion,
  handleCopy,
  pluginName
}) => {
  const { formatMessage } = useIntl();
  const versionRange = semver.validRange(strapiPeerDepVersion);
  const isCompatible = semver.satisfies(strapiAppVersion ?? "", versionRange ?? "");
  const installMessage = formatMessage({
    id: "admin.pages.MarketPlacePage.plugin.copy",
    defaultMessage: "Copy install command"
  });
  if (strapiAppVersion) {
    if (!versionRange || !isCompatible) {
      return (0, import_jsx_runtime.jsx)(
        TooltipImpl,
        {
          "data-testid": `tooltip-${pluginName}`,
          label: formatMessage(
            {
              id: "admin.pages.MarketPlacePage.plugin.version",
              defaultMessage: 'Update your Strapi version: "{strapiAppVersion}" to: "{versionRange}"'
            },
            {
              strapiAppVersion,
              versionRange
            }
          ),
          children: (0, import_jsx_runtime.jsx)("span", { children: (0, import_jsx_runtime.jsx)(
            Button,
            {
              size: "S",
              startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$3F, {}),
              variant: "secondary",
              onClick: handleCopy,
              disabled: !isCompatible,
              children: installMessage
            }
          ) })
        }
      );
    }
  }
  return (0, import_jsx_runtime.jsx)(Button, { size: "S", startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$3F, {}), variant: "secondary", onClick: handleCopy, children: installMessage });
};
var PackageStats = ({ githubStars = 0, npmDownloads = 0, npmPackageType }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsxs)(Flex, { gap: 1, children: [
    !!githubStars && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
      (0, import_jsx_runtime.jsx)(ForwardRef$x, { height: "1.2rem", width: "1.2rem", "aria-hidden": true }),
      (0, import_jsx_runtime.jsx)(ForwardRef$B, { height: "1.2rem", width: "1.2rem", fill: "warning500", "aria-hidden": true }),
      (0, import_jsx_runtime.jsx)(
        "p",
        {
          "aria-label": formatMessage(
            {
              id: `admin.pages.MarketPlacePage.${npmPackageType}.githubStars`,
              defaultMessage: `This {package} was starred {starsCount} on GitHub`
            },
            {
              starsCount: githubStars,
              package: npmPackageType
            }
          ),
          children: (0, import_jsx_runtime.jsx)(Typography, { variant: "pi", textColor: "neutral800", children: githubStars })
        }
      ),
      (0, import_jsx_runtime.jsx)(VerticalDivider, {})
    ] }),
    (0, import_jsx_runtime.jsx)(ForwardRef$3J, { height: "1.2rem", width: "1.2rem", "aria-hidden": true }),
    (0, import_jsx_runtime.jsx)(
      "p",
      {
        "aria-label": formatMessage(
          {
            id: `admin.pages.MarketPlacePage.${npmPackageType}.downloads`,
            defaultMessage: `This {package} has {downloadsCount} weekly downloads`
          },
          {
            downloadsCount: npmDownloads,
            package: npmPackageType
          }
        ),
        children: (0, import_jsx_runtime.jsx)(Typography, { variant: "pi", textColor: "neutral800", children: npmDownloads })
      }
    )
  ] });
};
var VerticalDivider = dt(Divider)`
  width: 1.2rem;
  transform: rotate(90deg);
`;
var NpmPackagesGrid = ({
  status,
  npmPackages = [],
  installedPackageNames = [],
  useYarn,
  isInDevelopmentMode,
  npmPackageType,
  strapiAppVersion,
  debouncedSearch
}) => {
  const { formatMessage } = useIntl();
  if (status === "error") {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  if (status === "loading") {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  const emptySearchMessage = formatMessage(
    {
      id: "admin.pages.MarketPlacePage.search.empty",
      defaultMessage: 'No result for "{target}"'
    },
    { target: debouncedSearch }
  );
  if (npmPackages.length === 0) {
    return (0, import_jsx_runtime.jsxs)(Box, { position: "relative", children: [
      (0, import_jsx_runtime.jsx)(Layouts.Grid, { size: "M", children: Array(12).fill(null).map((_, idx) => (0, import_jsx_runtime.jsx)(EmptyPluginCard, { height: "234px", hasRadius: true }, idx)) }),
      (0, import_jsx_runtime.jsx)(Box, { position: "absolute", top: 11, width: "100%", children: (0, import_jsx_runtime.jsxs)(Flex, { alignItems: "center", justifyContent: "center", direction: "column", children: [
        (0, import_jsx_runtime.jsx)(ForwardRef$J, { width: "160px", height: "88px" }),
        (0, import_jsx_runtime.jsx)(Box, { paddingTop: 6, children: (0, import_jsx_runtime.jsx)(Typography, { variant: "delta", tag: "p", textColor: "neutral600", children: emptySearchMessage }) })
      ] }) })
    ] });
  }
  return (0, import_jsx_runtime.jsx)(Grid.Root, { gap: 4, children: npmPackages.map((npmPackage) => (0, import_jsx_runtime.jsx)(
    Grid.Item,
    {
      col: 4,
      s: 6,
      xs: 12,
      style: { height: "100%" },
      direction: "column",
      alignItems: "stretch",
      children: (0, import_jsx_runtime.jsx)(
        NpmPackageCard,
        {
          npmPackage,
          isInstalled: installedPackageNames.includes(npmPackage.attributes.npmPackageName),
          useYarn,
          isInDevelopmentMode,
          npmPackageType,
          strapiAppVersion
        }
      )
    },
    npmPackage.id
  )) });
};
var EmptyPluginCard = dt(Box)`
  background: ${({ theme }) => `linear-gradient(180deg, rgba(234, 234, 239, 0) 0%, ${theme.colors.neutral150} 100%)`};
  opacity: 0.33;
`;
var PageHeader = ({ isOnline, npmPackageType = "plugin" }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const tracking = npmPackageType === "provider" ? "didSubmitProvider" : "didSubmitPlugin";
  return (0, import_jsx_runtime.jsx)(
    Layouts.Header,
    {
      title: formatMessage({
        id: "global.marketplace",
        defaultMessage: "Marketplace"
      }),
      subtitle: formatMessage({
        id: "admin.pages.MarketPlacePage.subtitle",
        defaultMessage: "Get more out of Strapi"
      }),
      primaryAction: isOnline && (0, import_jsx_runtime.jsx)(
        LinkButton,
        {
          startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$d, {}),
          variant: "tertiary",
          href: `https://market.strapi.io/submit-${npmPackageType}`,
          onClick: () => trackUsage(tracking),
          isExternal: true,
          children: formatMessage({
            id: `admin.pages.MarketPlacePage.submit.${npmPackageType}.link`,
            defaultMessage: `Submit ${npmPackageType}`
          })
        }
      )
    }
  );
};
var OfflineLayout = () => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(Layouts.Root, { children: (0, import_jsx_runtime.jsxs)(Main, { children: [
    (0, import_jsx_runtime.jsx)(PageHeader, {}),
    (0, import_jsx_runtime.jsxs)(
      Flex,
      {
        width: "100%",
        direction: "column",
        alignItems: "center",
        justifyContent: "center",
        paddingTop: `12rem`,
        children: [
          (0, import_jsx_runtime.jsx)(Box, { paddingBottom: 2, children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral700", variant: "alpha", children: formatMessage({
            id: "admin.pages.MarketPlacePage.offline.title",
            defaultMessage: "You are offline"
          }) }) }),
          (0, import_jsx_runtime.jsx)(Box, { paddingBottom: 6, children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral700", variant: "epsilon", children: formatMessage({
            id: "admin.pages.MarketPlacePage.offline.subtitle",
            defaultMessage: "You need to be connected to the Internet to access Strapi Market."
          }) }) }),
          (0, import_jsx_runtime.jsxs)(
            "svg",
            {
              width: "88",
              height: "88",
              viewBox: "0 0 88 88",
              fill: "none",
              xmlns: "http://www.w3.org/2000/svg",
              children: [
                (0, import_jsx_runtime.jsx)("rect", { x: ".5", y: ".5", width: "87", height: "87", rx: "43.5", fill: "#F0F0FF" }),
                (0, import_jsx_runtime.jsx)(
                  "path",
                  {
                    d: "M34 39.3h-4c-2.6 0-4.7 1-6.6 2.8a9 9 0 0 0-2.7 6.6 9 9 0 0 0 2.7 6.6A9 9 0 0 0 30 58h22.8L34 39.3Zm-11-11 3-3 39 39-3 3-4.7-4.6H30a13.8 13.8 0 0 1-14-14c0-3.8 1.3-7 4-9.7 2.6-2.7 5.7-4.2 9.5-4.3L23 28.2Zm38.2 11.1c3 .2 5.5 1.5 7.6 3.7A11 11 0 0 1 72 51c0 4-1.6 7.2-5 9.5l-3.3-3.4a6.5 6.5 0 0 0 3.6-6.1c0-1.9-.7-3.5-2-5-1.5-1.3-3.1-2-5-2h-3.5v-1.2c0-3.6-1.2-6.6-3.7-9a13 13 0 0 0-15-2.3L34.6 28a17 17 0 0 1 20.3 1.5c3.5 2.7 5.5 6 6.3 10Z",
                    fill: "#4945FF"
                  }
                ),
                (0, import_jsx_runtime.jsx)("rect", { x: ".5", y: ".5", width: "87", height: "87", rx: "43.5", stroke: "#D9D8FF" })
              ]
            }
          )
        ]
      }
    )
  ] }) });
};
var SORT_TYPES = {
  "name:asc": {
    selected: {
      id: "admin.pages.MarketPlacePage.sort.alphabetical.selected",
      defaultMessage: "Sort by alphabetical order"
    },
    option: {
      id: "admin.pages.MarketPlacePage.sort.alphabetical",
      defaultMessage: "Alphabetical order"
    }
  },
  "submissionDate:desc": {
    selected: {
      id: "admin.pages.MarketPlacePage.sort.newest.selected",
      defaultMessage: "Sort by newest"
    },
    option: {
      id: "admin.pages.MarketPlacePage.sort.newest",
      defaultMessage: "Newest"
    }
  },
  "githubStars:desc": {
    selected: {
      id: "admin.pages.MarketPlacePage.sort.githubStars.selected",
      defaultMessage: "Sort by GitHub stars"
    },
    option: {
      id: "admin.pages.MarketPlacePage.sort.githubStars",
      defaultMessage: "Number of GitHub stars"
    }
  },
  "npmDownloads:desc": {
    selected: {
      id: "admin.pages.MarketPlacePage.sort.npmDownloads.selected",
      defaultMessage: "Sort by npm downloads"
    },
    option: {
      id: "admin.pages.MarketPlacePage.sort.npmDownloads",
      defaultMessage: "Number of downloads"
    }
  }
};
var SortSelect = ({ sortQuery, handleSelectChange }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(SelectWrapper, { children: (0, import_jsx_runtime.jsx)(
    SingleSelect,
    {
      value: sortQuery,
      customizeContent: () => formatMessage(SORT_TYPES[sortQuery].selected),
      onChange: (sortName) => {
        handleSelectChange({ sort: sortName });
      },
      "aria-label": formatMessage({
        id: "admin.pages.MarketPlacePage.sort.label",
        defaultMessage: "Sort by"
      }),
      size: "S",
      children: Object.entries(SORT_TYPES).map(([sortName, messages]) => {
        return (0, import_jsx_runtime.jsx)(SingleSelectOption, { value: sortName, children: formatMessage(messages.option) }, sortName);
      })
    }
  ) });
};
var SelectWrapper = dt(Box)`
  font-weight: ${({ theme }) => theme.fontWeights.semiBold};

  span {
    font-size: ${({ theme }) => theme.fontSizes[1]};
  }
`;
var MARKETPLACE_API_URL = "https://market-api.strapi.io";
function useMarketplaceData({
  npmPackageType,
  debouncedSearch,
  query,
  tabQuery,
  strapiVersion
}) {
  const { notifyStatus } = useNotifyAT();
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const marketplaceTitle = formatMessage({
    id: "global.marketplace",
    defaultMessage: "Marketplace"
  });
  const notifyMarketplaceLoad = () => {
    notifyStatus(
      formatMessage(
        {
          id: "app.utils.notify.data-loaded",
          defaultMessage: "The {target} has loaded"
        },
        { target: marketplaceTitle }
      )
    );
  };
  const paginationParams = {
    page: (query == null ? void 0 : query.page) || 1,
    pageSize: (query == null ? void 0 : query.pageSize) || 24
  };
  const pluginParams = {
    ...tabQuery.plugin,
    pagination: paginationParams,
    search: debouncedSearch,
    version: strapiVersion
  };
  const { data: pluginsResponse, status: pluginsStatus } = useQuery(
    ["marketplace", "plugins", pluginParams],
    async () => {
      try {
        const queryString = qs.stringify(pluginParams);
        const res = await fetch(`${MARKETPLACE_API_URL}/plugins?${queryString}`);
        if (!res.ok) {
          throw new Error("Failed to fetch marketplace plugins.");
        }
        const data = await res.json();
        return data;
      } catch (error) {
      }
      return null;
    },
    {
      onSuccess() {
        notifyMarketplaceLoad();
      },
      onError() {
        toggleNotification({
          type: "danger",
          message: formatMessage({ id: "notification.error", defaultMessage: "An error occured" })
        });
      }
    }
  );
  const providerParams = {
    ...tabQuery.provider,
    pagination: paginationParams,
    search: debouncedSearch,
    version: strapiVersion
  };
  const { data: providersResponse, status: providersStatus } = useQuery(
    ["marketplace", "providers", providerParams],
    async () => {
      const queryString = qs.stringify(providerParams);
      const res = await fetch(`${MARKETPLACE_API_URL}/providers?${queryString}`);
      if (!res.ok) {
        throw new Error("Failed to fetch marketplace providers.");
      }
      const data = await res.json();
      return data;
    },
    {
      onSuccess() {
        notifyMarketplaceLoad();
      },
      onError() {
        toggleNotification({
          type: "danger",
          message: formatMessage({ id: "notification.error", defaultMessage: "An error occured" })
        });
      }
    }
  );
  const npmPackageTypeResponse = npmPackageType === "plugin" ? pluginsResponse : providersResponse;
  const possibleCollections = (npmPackageTypeResponse == null ? void 0 : npmPackageTypeResponse.meta.collections) ?? {};
  const possibleCategories = (pluginsResponse == null ? void 0 : pluginsResponse.meta.categories) ?? {};
  const { pagination } = (npmPackageTypeResponse == null ? void 0 : npmPackageTypeResponse.meta) ?? {};
  return {
    pluginsResponse,
    providersResponse,
    pluginsStatus,
    providersStatus,
    possibleCollections,
    possibleCategories,
    pagination
  };
}
var useNavigatorOnline = () => {
  const onlineStatus = typeof navigator !== "undefined" && typeof navigator.onLine === "boolean" ? navigator.onLine : true;
  const [isOnline, setIsOnline] = React.useState(onlineStatus);
  const setOnline = () => setIsOnline(true);
  const setOffline = () => setIsOnline(false);
  React.useEffect(() => {
    window.addEventListener("online", setOnline);
    window.addEventListener("offline", setOffline);
    return () => {
      window.removeEventListener("online", setOnline);
      window.removeEventListener("offline", setOffline);
    };
  }, []);
  return isOnline;
};
var PLUGIN = "plugin";
var PROVIDER = "provider";
var MarketplacePage = () => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const { toggleNotification } = useNotification();
  const [{ query }, setQuery] = useQueryParams();
  const debouncedSearch = useDebounce(query == null ? void 0 : query.search, 500) || "";
  const {
    autoReload: isInDevelopmentMode,
    dependencies,
    useYarn,
    strapiVersion
  } = useAppInfo("MarketplacePage", (state) => state);
  const isOnline = useNavigatorOnline();
  const npmPackageType = (query == null ? void 0 : query.npmPackageType) || PLUGIN;
  const [tabQuery, setTabQuery] = React.useState({
    plugin: npmPackageType === PLUGIN ? { ...query } : {},
    provider: npmPackageType === PROVIDER ? { ...query } : {}
  });
  React.useEffect(() => {
    trackUsage("didGoToMarketplace");
  }, [trackUsage]);
  React.useEffect(() => {
    if (!isInDevelopmentMode) {
      toggleNotification({
        type: "info",
        message: formatMessage({
          id: "admin.pages.MarketPlacePage.production",
          defaultMessage: "Manage plugins from the development environment"
        })
      });
    }
  }, [toggleNotification, isInDevelopmentMode, formatMessage]);
  const {
    pluginsResponse,
    providersResponse,
    pluginsStatus,
    providersStatus,
    possibleCollections,
    possibleCategories,
    pagination
  } = useMarketplaceData({ npmPackageType, debouncedSearch, query, tabQuery, strapiVersion });
  if (!isOnline) {
    return (0, import_jsx_runtime.jsx)(OfflineLayout, {});
  }
  const handleTabChange = (tab) => {
    const selectedTab = tab === PLUGIN || tab === PROVIDER ? tab : PLUGIN;
    const hasTabQuery = tabQuery[selectedTab] && Object.keys(tabQuery[selectedTab]).length;
    if (hasTabQuery) {
      setQuery({
        // Keep filters and search
        ...tabQuery[selectedTab],
        search: (query == null ? void 0 : query.search) || "",
        // Set tab and reset page
        npmPackageType: selectedTab,
        page: 1
      });
    } else {
      setQuery({
        // Set tab
        npmPackageType: selectedTab,
        // Clear filters
        collections: [],
        categories: [],
        sort: "name:asc",
        page: 1,
        // Keep search
        search: (query == null ? void 0 : query.search) || ""
      });
    }
  };
  const handleSelectChange = (update) => {
    setQuery({ ...update, page: 1 });
    setTabQuery((prev) => ({
      ...prev,
      [npmPackageType]: { ...prev[npmPackageType], ...update }
    }));
  };
  const handleSelectClear = (filterType) => {
    setQuery({ [filterType]: [], page: void 0 }, "remove");
    setTabQuery((prev) => ({ ...prev, [npmPackageType]: {} }));
  };
  const handleSortSelectChange = ({ sort }) => (
    // @ts-expect-error - this is a narrowing issue.
    handleSelectChange({ sort })
  );
  const installedPackageNames = Object.keys(dependencies ?? {});
  return (0, import_jsx_runtime.jsx)(Layouts.Root, { children: (0, import_jsx_runtime.jsxs)(Page.Main, { children: [
    (0, import_jsx_runtime.jsx)(Page.Title, { children: formatMessage({
      id: "admin.pages.MarketPlacePage.head",
      defaultMessage: "Marketplace - Plugins"
    }) }),
    (0, import_jsx_runtime.jsx)(PageHeader, { isOnline, npmPackageType }),
    (0, import_jsx_runtime.jsx)(Layouts.Content, { children: (0, import_jsx_runtime.jsxs)(Tabs.Root, { variant: "simple", onValueChange: handleTabChange, value: npmPackageType, children: [
      (0, import_jsx_runtime.jsxs)(Flex, { justifyContent: "space-between", paddingBottom: 4, children: [
        (0, import_jsx_runtime.jsxs)(
          Tabs.List,
          {
            "aria-label": formatMessage({
              id: "admin.pages.MarketPlacePage.tab-group.label",
              defaultMessage: "Plugins and Providers for Strapi"
            }),
            children: [
              (0, import_jsx_runtime.jsxs)(Tabs.Trigger, { value: PLUGIN, children: [
                formatMessage({
                  id: "admin.pages.MarketPlacePage.plugins",
                  defaultMessage: "Plugins"
                }),
                " ",
                pluginsResponse ? `(${pluginsResponse.meta.pagination.total})` : "..."
              ] }),
              (0, import_jsx_runtime.jsxs)(Tabs.Trigger, { value: PROVIDER, children: [
                formatMessage({
                  id: "admin.pages.MarketPlacePage.providers",
                  defaultMessage: "Providers"
                }),
                " ",
                providersResponse ? `(${providersResponse.meta.pagination.total})` : "..."
              ] })
            ]
          }
        ),
        (0, import_jsx_runtime.jsx)(Box, { width: "25%", children: (0, import_jsx_runtime.jsx)(
          Searchbar,
          {
            name: "searchbar",
            onClear: () => setQuery({ search: "", page: 1 }),
            value: query == null ? void 0 : query.search,
            onChange: (e) => setQuery({ search: e.target.value, page: 1 }),
            clearLabel: formatMessage({
              id: "admin.pages.MarketPlacePage.search.clear",
              defaultMessage: "Clear the search"
            }),
            placeholder: formatMessage({
              id: "admin.pages.MarketPlacePage.search.placeholder",
              defaultMessage: "Search"
            }),
            children: formatMessage({
              id: "admin.pages.MarketPlacePage.search.placeholder",
              defaultMessage: "Search"
            })
          }
        ) })
      ] }),
      (0, import_jsx_runtime.jsxs)(Flex, { paddingBottom: 4, gap: 2, children: [
        (0, import_jsx_runtime.jsx)(
          SortSelect,
          {
            sortQuery: (query == null ? void 0 : query.sort) || "name:asc",
            handleSelectChange: handleSortSelectChange
          }
        ),
        (0, import_jsx_runtime.jsx)(
          NpmPackagesFilters,
          {
            npmPackageType,
            possibleCollections,
            possibleCategories,
            query: query || {},
            handleSelectChange,
            handleSelectClear
          }
        )
      ] }),
      (0, import_jsx_runtime.jsx)(Tabs.Content, { value: PLUGIN, children: (0, import_jsx_runtime.jsx)(
        NpmPackagesGrid,
        {
          npmPackages: pluginsResponse == null ? void 0 : pluginsResponse.data,
          status: pluginsStatus,
          installedPackageNames,
          useYarn,
          isInDevelopmentMode,
          npmPackageType: "plugin",
          strapiAppVersion: strapiVersion,
          debouncedSearch
        }
      ) }),
      (0, import_jsx_runtime.jsx)(Tabs.Content, { value: PROVIDER, children: (0, import_jsx_runtime.jsx)(
        NpmPackagesGrid,
        {
          npmPackages: providersResponse == null ? void 0 : providersResponse.data,
          status: providersStatus,
          installedPackageNames,
          useYarn,
          isInDevelopmentMode,
          npmPackageType: "provider",
          debouncedSearch
        }
      ) }),
      (0, import_jsx_runtime.jsxs)(Pagination.Root, { ...pagination, defaultPageSize: 24, children: [
        (0, import_jsx_runtime.jsx)(Pagination.PageSize, { options: ["12", "24", "50", "100"] }),
        (0, import_jsx_runtime.jsx)(Pagination.Links, {})
      ] }),
      (0, import_jsx_runtime.jsx)(Box, { paddingTop: 8, children: (0, import_jsx_runtime.jsx)(
        "a",
        {
          href: "https://strapi.canny.io/plugin-requests",
          target: "_blank",
          rel: "noopener noreferrer nofollow",
          style: { textDecoration: "none" },
          onClick: () => trackUsage("didMissMarketplacePlugin"),
          children: (0, import_jsx_runtime.jsx)(
            ContentBox,
            {
              title: formatMessage({
                id: "admin.pages.MarketPlacePage.missingPlugin.title",
                defaultMessage: "Documentation"
              }),
              subtitle: formatMessage({
                id: "admin.pages.MarketPlacePage.missingPlugin.description",
                defaultMessage: "Tell us what plugin you are looking for and we'll let our community plugin developers know in case they are in search for inspiration!"
              }),
              icon: (0, import_jsx_runtime.jsx)(ForwardRef$v, {}),
              iconBackground: "alternative100",
              endAction: (0, import_jsx_runtime.jsx)(
                ForwardRef$3t,
                {
                  fill: "neutral600",
                  width: "1.2rem",
                  height: "1.2rem",
                  style: { marginLeft: "0.8rem" }
                }
              )
            }
          )
        }
      ) })
    ] }) })
  ] }) });
};
var ProtectedMarketplacePage = () => {
  const permissions = useTypedSelector((state) => {
    var _a;
    return (_a = state.admin_app.permissions.marketplace) == null ? void 0 : _a.main;
  });
  return (0, import_jsx_runtime.jsx)(Page.Protect, { permissions, children: (0, import_jsx_runtime.jsx)(MarketplacePage, {}) });
};
export {
  MarketplacePage,
  ProtectedMarketplacePage
};
//# sourceMappingURL=MarketplacePage-DiGt5ghr-UVUHLLY5.js.map
