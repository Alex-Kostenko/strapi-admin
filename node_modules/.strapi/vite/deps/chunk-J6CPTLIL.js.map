{
  "version": 3,
  "sources": ["../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/core/apis/rbac.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/components/Context.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/core/store/hooks.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/features/StrapiApp.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/hooks/useQueryParams.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/reducer.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/services/auth.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/features/Auth.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/features/Notifications.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/utils/getPrefixedId.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/utils/normalizeAPIError.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/utils/objects.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/hooks/useAPIErrorHandler.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/components/PageHelpers.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/utils/once.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/utils/strings.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/hooks/usePrev.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/hooks/useRBAC.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/features/AppInfo.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/features/Tracking.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/features/Configuration.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/components/GuidedTour/Provider.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/components/LanguageProvider.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/components/Theme.tsx"],
  "sourcesContent": ["import { Location } from 'react-router-dom';\n\nimport type { Permission, User } from '../../features/Auth';\n\ninterface RBACContext extends Pick<Location, 'pathname' | 'search'> {\n  /**\n   * The current user.\n   */\n  user?: User;\n  /**\n   * The permissions of the current user.\n   */\n  permissions: Permission[];\n}\n\ninterface RBACMiddleware {\n  (\n    ctx: RBACContext\n  ): (\n    next: (permissions: Permission[]) => Promise<Permission[]> | Permission[]\n  ) => (permissions: Permission[]) => Promise<Permission[]> | Permission[];\n}\n\nclass RBAC {\n  private middlewares: RBACMiddleware[] = [];\n\n  constructor() {}\n\n  use(middleware: RBACMiddleware[]): void;\n  use(middleware: RBACMiddleware): void;\n  use(middleware: RBACMiddleware | RBACMiddleware[]): void {\n    if (Array.isArray(middleware)) {\n      this.middlewares.push(...middleware);\n    } else {\n      this.middlewares.push(middleware);\n    }\n  }\n\n  run = async (ctx: RBACContext, permissions: Permission[]): Promise<Permission[]> => {\n    let index = 0;\n\n    const middlewaresToRun = this.middlewares.map((middleware) => middleware(ctx));\n\n    const next = async (permissions: Permission[]) => {\n      if (index < this.middlewares.length) {\n        return middlewaresToRun[index++](next)(permissions);\n      }\n\n      return permissions;\n    };\n\n    return next(permissions);\n  };\n}\n\nexport { RBAC };\nexport type { RBACMiddleware, RBACContext };\n", "import * as React from 'react';\n\nimport * as ContextSelector from 'use-context-selector';\n\n/**\n * @experimental\n * @description Create a context provider and a hook to consume the context.\n *\n * @warning this may be removed to the design-system instead of becoming stable.\n */\nfunction createContext<ContextValueType extends object | null>(\n  rootComponentName: string,\n  defaultContext?: ContextValueType\n) {\n  const Context = ContextSelector.createContext<ContextValueType | undefined>(defaultContext);\n\n  const Provider = (props: ContextValueType & { children: React.ReactNode }) => {\n    const { children, ...context } = props;\n    // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  };\n\n  const useContext = <Selected,>(\n    consumerName: string,\n    selector: (value: ContextValueType) => Selected\n  ): Selected =>\n    ContextSelector.useContextSelector(Context, (ctx) => {\n      if (ctx) return selector(ctx);\n      // it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    });\n\n  Provider.displayName = rootComponentName + 'Provider';\n\n  return [Provider, useContext] as const;\n}\n\nexport { createContext };\n", "import { createSelector, Selector } from '@reduxjs/toolkit';\nimport { useDispatch, useStore, TypedUseSelectorHook, useSelector } from 'react-redux';\n\nimport type { RootState, Store } from './configure';\n\ntype AppDispatch = Store['dispatch'];\n\nconst useTypedDispatch: () => AppDispatch = useDispatch;\nconst useTypedStore = useStore as () => Store;\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nconst createTypedSelector = <TResult>(selector: Selector<RootState, TResult>) =>\n  createSelector((state: RootState) => state, selector);\n\nexport { useTypedDispatch, useTypedStore, useTypedSelector, createTypedSelector };\n", "import { createContext } from '../components/Context';\nimport { RBAC } from '../core/apis/rbac';\nimport { Router } from '../core/apis/router';\n\nimport type { StrapiApp } from '../StrapiApp';\n\n/* -------------------------------------------------------------------------------------------------\n * StrapiApp\n * -----------------------------------------------------------------------------------------------*/\ninterface StrapiAppContextValue\n  extends Pick<\n      StrapiApp,\n      | 'customFields'\n      | 'getPlugin'\n      | 'getAdminInjectedComponents'\n      | 'plugins'\n      | 'runHookParallel'\n      | 'runHookSeries'\n    >,\n    Pick<Router, 'menu' | 'settings'> {\n  components: StrapiApp['library']['components'];\n  fields: StrapiApp['library']['fields'];\n  rbac: RBAC;\n  runHookWaterfall: <TData>(\n    name: Parameters<StrapiApp['runHookWaterfall']>[0],\n    initialValue: TData\n  ) => TData;\n}\n\nconst [StrapiAppProvider, useStrapiApp] = createContext<StrapiAppContextValue>('StrapiApp');\n\nexport { StrapiAppProvider, useStrapiApp };\nexport type { StrapiAppContextValue };\n", "import { useCallback, useMemo } from 'react';\n\nimport { parse, stringify } from 'qs';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nconst useQueryParams = <TQuery extends object>(initialParams?: TQuery) => {\n  const { search } = useLocation();\n  const navigate = useNavigate();\n\n  const query = useMemo(() => {\n    // TODO: investigate why sometimes we're getting the search with a leading `?` and sometimes not.\n    const searchQuery = search.startsWith('?') ? search.slice(1) : search;\n    if (!search && initialParams) {\n      return initialParams;\n    }\n\n    return { ...initialParams, ...parse(searchQuery) } as TQuery;\n  }, [search, initialParams]);\n\n  const setQuery = useCallback(\n    (nextParams: TQuery, method: 'push' | 'remove' = 'push', replace = false) => {\n      let nextQuery = { ...query };\n\n      if (method === 'remove') {\n        Object.keys(nextParams).forEach((key) => {\n          if (Object.prototype.hasOwnProperty.call(nextQuery, key)) {\n            // @ts-expect-error â€“ this is fine, if you want to fix it, please do.\n            delete nextQuery[key];\n          }\n        });\n      } else {\n        nextQuery = { ...query, ...nextParams };\n      }\n\n      navigate({ search: stringify(nextQuery, { encode: false }) }, { replace });\n    },\n    [navigate, query]\n  );\n\n  return [{ query, rawQuery: search }, setQuery] as const;\n};\n\nexport { useQueryParams };\n", "import { createSlice } from '@reduxjs/toolkit';\n\nimport { PermissionMap } from './types/permissions';\n\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\ntype ThemeName = 'light' | 'dark' | 'system';\n\ninterface AppState {\n  language: {\n    locale: string;\n    localeNames: Record<string, string>;\n  };\n  permissions: Partial<PermissionMap>;\n  theme: {\n    currentTheme: ThemeName;\n    availableThemes: string[];\n  };\n  token?: string | null;\n}\n\nconst STORAGE_KEYS = {\n  TOKEN: 'jwtToken',\n  USER: 'userInfo',\n};\n\nconst THEME_LOCAL_STORAGE_KEY = 'STRAPI_THEME';\nconst LANGUAGE_LOCAL_STORAGE_KEY = 'strapi-admin-language';\n\nexport const getStoredToken = (): string | null => {\n  const token =\n    localStorage.getItem(STORAGE_KEYS.TOKEN) ?? sessionStorage.getItem(STORAGE_KEYS.TOKEN);\n\n  if (typeof token === 'string') {\n    return JSON.parse(token);\n  }\n\n  return null;\n};\n\nconst adminSlice = createSlice({\n  name: 'admin',\n  initialState: () => {\n    return {\n      language: {\n        locale: 'en',\n        localeNames: { en: 'English' },\n      },\n      permissions: {},\n      theme: {\n        availableThemes: [],\n        currentTheme: localStorage.getItem(THEME_LOCAL_STORAGE_KEY) || 'system',\n      },\n      token: null,\n    } as AppState;\n  },\n  reducers: {\n    setAppTheme(state, action: PayloadAction<ThemeName>) {\n      state.theme.currentTheme = action.payload;\n      window.localStorage.setItem(THEME_LOCAL_STORAGE_KEY, action.payload);\n    },\n    setAvailableThemes(state, action: PayloadAction<AppState['theme']['availableThemes']>) {\n      state.theme.availableThemes = action.payload;\n    },\n    setLocale(state, action: PayloadAction<string>) {\n      state.language.locale = action.payload;\n\n      window.localStorage.setItem(LANGUAGE_LOCAL_STORAGE_KEY, action.payload);\n      document.documentElement.setAttribute('lang', action.payload);\n    },\n    setToken(state, action: PayloadAction<string | null>) {\n      state.token = action.payload;\n    },\n    login(state, action: PayloadAction<{ token: string; persist?: boolean }>) {\n      const { token, persist } = action.payload;\n\n      if (!persist) {\n        window.sessionStorage.setItem(STORAGE_KEYS.TOKEN, JSON.stringify(token));\n      } else {\n        window.localStorage.setItem(STORAGE_KEYS.TOKEN, JSON.stringify(token));\n      }\n\n      state.token = token;\n    },\n    logout(state) {\n      state.token = null;\n      window.localStorage.removeItem(STORAGE_KEYS.TOKEN);\n      window.localStorage.removeItem(STORAGE_KEYS.USER);\n      window.sessionStorage.removeItem(STORAGE_KEYS.TOKEN);\n      window.sessionStorage.removeItem(STORAGE_KEYS.USER);\n    },\n  },\n});\n\nconst reducer = adminSlice.reducer;\n\nexport const { setAppTheme, setAvailableThemes, setLocale, setToken, logout, login } =\n  adminSlice.actions;\n\nexport { reducer, THEME_LOCAL_STORAGE_KEY, LANGUAGE_LOCAL_STORAGE_KEY };\nexport type { AppState, ThemeName };\n", "import { ProvidersOptions } from '../../../shared/contracts/admin';\nimport {\n  type RenewToken,\n  type Login,\n  type ResetPassword,\n  type RegisterAdmin,\n  type Register,\n  type RegistrationInfo,\n  ForgotPassword,\n} from '../../../shared/contracts/authentication';\nimport { Check } from '../../../shared/contracts/permissions';\nimport { GetProviders, IsSSOLocked } from '../../../shared/contracts/providers';\nimport { type GetOwnPermissions, type GetMe, type UpdateMe } from '../../../shared/contracts/users';\n\nimport { adminApi } from './api';\n\nconst authService = adminApi\n  .enhanceEndpoints({\n    addTagTypes: ['User', 'Me', 'ProvidersOptions'],\n  })\n  .injectEndpoints({\n    endpoints: (builder) => ({\n      /**\n       * ME\n       */\n      getMe: builder.query<GetMe.Response['data'], void>({\n        query: () => ({\n          method: 'GET',\n          url: '/admin/users/me',\n        }),\n        transformResponse(res: GetMe.Response) {\n          return res.data;\n        },\n        providesTags: (res) => (res ? ['Me', { type: 'User', id: res.id }] : ['Me']),\n      }),\n      getMyPermissions: builder.query<GetOwnPermissions.Response['data'], void>({\n        query: () => ({\n          method: 'GET',\n          url: '/admin/users/me/permissions',\n        }),\n        transformResponse(res: GetOwnPermissions.Response) {\n          return res.data;\n        },\n      }),\n      updateMe: builder.mutation<UpdateMe.Response['data'], UpdateMe.Request['body']>({\n        query: (body) => ({\n          method: 'PUT',\n          url: '/admin/users/me',\n          data: body,\n        }),\n        transformResponse(res: UpdateMe.Response) {\n          return res.data;\n        },\n        invalidatesTags: ['Me'],\n      }),\n      /**\n       * Permissions\n       */\n      checkPermissions: builder.query<Check.Response, Check.Request['body']>({\n        query: (permissions) => ({\n          method: 'POST',\n          url: '/admin/permissions/check',\n          data: permissions,\n        }),\n      }),\n      /**\n       * Auth methods\n       */\n      login: builder.mutation<Login.Response['data'], Login.Request['body']>({\n        query: (body) => ({\n          method: 'POST',\n          url: '/admin/login',\n          data: body,\n        }),\n        transformResponse(res: Login.Response) {\n          return res.data;\n        },\n        invalidatesTags: ['Me'],\n      }),\n      logout: builder.mutation<void, void>({\n        query: () => ({\n          method: 'POST',\n          url: '/admin/logout',\n        }),\n      }),\n      resetPassword: builder.mutation<\n        ResetPassword.Response['data'],\n        ResetPassword.Request['body']\n      >({\n        query: (body) => ({\n          method: 'POST',\n          url: '/admin/reset-password',\n          data: body,\n        }),\n        transformResponse(res: ResetPassword.Response) {\n          return res.data;\n        },\n      }),\n      renewToken: builder.mutation<RenewToken.Response['data'], RenewToken.Request['body']>({\n        query: (body) => ({\n          method: 'POST',\n          url: '/admin/renew-token',\n          data: body,\n        }),\n        transformResponse(res: RenewToken.Response) {\n          return res.data;\n        },\n      }),\n      getRegistrationInfo: builder.query<\n        RegistrationInfo.Response['data'],\n        RegistrationInfo.Request['query']['registrationToken']\n      >({\n        query: (registrationToken) => ({\n          url: '/admin/registration-info',\n          method: 'GET',\n          config: {\n            params: {\n              registrationToken,\n            },\n          },\n        }),\n        transformResponse(res: RegistrationInfo.Response) {\n          return res.data;\n        },\n      }),\n      registerAdmin: builder.mutation<\n        RegisterAdmin.Response['data'],\n        RegisterAdmin.Request['body']\n      >({\n        query: (body) => ({\n          method: 'POST',\n          url: '/admin/register-admin',\n          data: body,\n        }),\n        transformResponse(res: RegisterAdmin.Response) {\n          return res.data;\n        },\n      }),\n      registerUser: builder.mutation<Register.Response['data'], Register.Request['body']>({\n        query: (body) => ({\n          method: 'POST',\n          url: '/admin/register',\n          data: body,\n        }),\n        transformResponse(res: Register.Response) {\n          return res.data;\n        },\n      }),\n      forgotPassword: builder.mutation<ForgotPassword.Response, ForgotPassword.Request['body']>({\n        query: (body) => ({\n          url: '/admin/forgot-password',\n          method: 'POST',\n          data: body,\n        }),\n      }),\n      isSSOLocked: builder.query<IsSSOLocked.Response['data'], void>({\n        query: () => ({\n          url: '/admin/providers/isSSOLocked',\n          method: 'GET',\n        }),\n        transformResponse(res: IsSSOLocked.Response) {\n          return res.data;\n        },\n      }),\n      getProviders: builder.query<GetProviders.Response, void>({\n        query: () => ({\n          url: '/admin/providers',\n          method: 'GET',\n        }),\n      }),\n      getProviderOptions: builder.query<ProvidersOptions.Response['data'], void>({\n        query: () => ({\n          url: '/admin/providers/options',\n          method: 'GET',\n        }),\n        transformResponse(res: ProvidersOptions.Response) {\n          return res.data;\n        },\n        providesTags: ['ProvidersOptions'],\n      }),\n      updateProviderOptions: builder.mutation<\n        ProvidersOptions.Response['data'],\n        ProvidersOptions.Request['body']\n      >({\n        query: (body) => ({\n          url: '/admin/providers/options',\n          method: 'PUT',\n          data: body,\n        }),\n        transformResponse(res: ProvidersOptions.Response) {\n          return res.data;\n        },\n        invalidatesTags: ['ProvidersOptions'],\n      }),\n    }),\n    overrideExisting: false,\n  });\n\nconst {\n  useCheckPermissionsQuery,\n  useLazyCheckPermissionsQuery,\n  useGetMeQuery,\n  useLoginMutation,\n  useRenewTokenMutation,\n  useLogoutMutation,\n  useUpdateMeMutation,\n  useResetPasswordMutation,\n  useRegisterAdminMutation,\n  useRegisterUserMutation,\n  useGetRegistrationInfoQuery,\n  useForgotPasswordMutation,\n  useGetMyPermissionsQuery,\n  useIsSSOLockedQuery,\n  useGetProvidersQuery,\n  useGetProviderOptionsQuery,\n  useUpdateProviderOptionsMutation,\n} = authService;\n\nexport {\n  useCheckPermissionsQuery,\n  useLazyCheckPermissionsQuery,\n  useGetMeQuery,\n  useLoginMutation,\n  useRenewTokenMutation,\n  useLogoutMutation,\n  useUpdateMeMutation,\n  useResetPasswordMutation,\n  useRegisterAdminMutation,\n  useRegisterUserMutation,\n  useGetRegistrationInfoQuery,\n  useForgotPasswordMutation,\n  useGetMyPermissionsQuery,\n  useIsSSOLockedQuery,\n  useGetProvidersQuery,\n  useGetProviderOptionsQuery,\n  useUpdateProviderOptionsMutation,\n};\n", "import * as React from 'react';\n\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport { Login } from '../../../shared/contracts/authentication';\nimport { createContext } from '../components/Context';\nimport { useTypedDispatch, useTypedSelector } from '../core/store/hooks';\nimport { useStrapiApp } from '../features/StrapiApp';\nimport { useQueryParams } from '../hooks/useQueryParams';\nimport { login as loginAction, logout as logoutAction, setLocale } from '../reducer';\nimport { adminApi } from '../services/api';\nimport {\n  useGetMeQuery,\n  useGetMyPermissionsQuery,\n  useLazyCheckPermissionsQuery,\n  useLoginMutation,\n  useLogoutMutation,\n  useRenewTokenMutation,\n} from '../services/auth';\n\nimport type {\n  Permission as PermissionContract,\n  SanitizedAdminUser,\n} from '../../../shared/contracts/shared';\n\ninterface Permission\n  extends Pick<PermissionContract, 'action' | 'subject'>,\n    Partial<Omit<PermissionContract, 'action' | 'subject'>> {}\n\ninterface User\n  extends Pick<SanitizedAdminUser, 'email' | 'firstname' | 'lastname' | 'username' | 'roles'>,\n    Partial<Omit<SanitizedAdminUser, 'email' | 'firstname' | 'lastname' | 'username' | 'roles'>> {}\n\ninterface AuthContextValue {\n  login: (\n    body: Login.Request['body'] & { rememberMe: boolean }\n  ) => Promise<Awaited<ReturnType<ReturnType<typeof useLoginMutation>[0]>>>;\n  logout: () => Promise<void>;\n  /**\n   * @alpha\n   * @description given a list of permissions, this function checks\n   * those against the current user's permissions or those passed as\n   * the second argument, if the user has those permissions the complete\n   * permission object form the API is returned. Therefore, if the list is\n   * empty, the user does not have any of those permissions.\n   */\n  checkUserHasPermissions: (\n    permissions?: Permission[],\n    passedPermissions?: Permission[],\n    rawQueryContext?: string\n  ) => Promise<Permission[]>;\n  isLoading: boolean;\n  permissions: Permission[];\n  refetchPermissions: () => Promise<void>;\n  token: string | null;\n  user?: User;\n}\n\nconst [Provider, useAuth] = createContext<AuthContextValue>('Auth');\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n  /**\n   * @internal could be removed at any time.\n   */\n  _defaultPermissions?: Permission[];\n\n  // NOTE: this is used for testing purposed only\n  _disableRenewToken?: boolean;\n}\n\nconst STORAGE_KEYS = {\n  TOKEN: 'jwtToken',\n  USER: 'userInfo',\n};\n\nconst AuthProvider = ({\n  children,\n  _defaultPermissions = [],\n  _disableRenewToken = false,\n}: AuthProviderProps) => {\n  const dispatch = useTypedDispatch();\n  const runRbacMiddleware = useStrapiApp('AuthProvider', (state) => state.rbac.run);\n  const location = useLocation();\n  const [{ rawQuery }] = useQueryParams();\n\n  const token = useTypedSelector((state) => state.admin_app.token ?? null);\n\n  const { data: user, isLoading: isLoadingUser } = useGetMeQuery(undefined, {\n    /**\n     * If there's no token, we don't try to fetch\n     * the user data because it will fail.\n     */\n    skip: !token,\n  });\n\n  const {\n    data: userPermissions = _defaultPermissions,\n    refetch,\n    isUninitialized,\n    isLoading: isLoadingPermissions,\n  } = useGetMyPermissionsQuery(undefined, {\n    skip: !token,\n  });\n\n  const navigate = useNavigate();\n\n  const [loginMutation] = useLoginMutation();\n  const [renewTokenMutation] = useRenewTokenMutation();\n  const [logoutMutation] = useLogoutMutation();\n\n  const clearStateAndLogout = React.useCallback(() => {\n    dispatch(adminApi.util.resetApiState());\n    dispatch(logoutAction());\n    navigate('/auth/login');\n  }, [dispatch, navigate]);\n\n  /**\n   * Fetch data from storages on mount and store it in our state.\n   * It's not normally stored in session storage unless the user\n   * does click \"remember me\" when they login. We also need to renew the token.\n   */\n  React.useEffect(() => {\n    if (token && !_disableRenewToken) {\n      renewTokenMutation({ token }).then((res) => {\n        if ('data' in res) {\n          dispatch(\n            loginAction({\n              token: res.data.token,\n            })\n          );\n        } else {\n          clearStateAndLogout();\n        }\n      });\n    }\n  }, [token, dispatch, renewTokenMutation, clearStateAndLogout, _disableRenewToken]);\n\n  React.useEffect(() => {\n    if (user) {\n      if (user.preferedLanguage) {\n        dispatch(setLocale(user.preferedLanguage));\n      }\n    }\n  }, [dispatch, user]);\n\n  React.useEffect(() => {\n    /**\n     * This will log a user out of all tabs if they log out in one tab.\n     */\n    const handleUserStorageChange = (event: StorageEvent) => {\n      if (event.key === STORAGE_KEYS.USER && event.newValue === null) {\n        clearStateAndLogout();\n      }\n    };\n\n    window.addEventListener('storage', handleUserStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleUserStorageChange);\n    };\n  });\n\n  const login = React.useCallback<AuthContextValue['login']>(\n    async ({ rememberMe, ...body }) => {\n      const res = await loginMutation(body);\n\n      /**\n       * There will always be a `data` key in the response\n       * because if something fails, it will throw an error.\n       */\n      if ('data' in res) {\n        const { token } = res.data;\n\n        dispatch(\n          loginAction({\n            token,\n            persist: rememberMe,\n          })\n        );\n      }\n\n      return res;\n    },\n    [dispatch, loginMutation]\n  );\n\n  const logout = React.useCallback(async () => {\n    await logoutMutation();\n    clearStateAndLogout();\n  }, [clearStateAndLogout, logoutMutation]);\n\n  const refetchPermissions = React.useCallback(async () => {\n    if (!isUninitialized) {\n      await refetch();\n    }\n  }, [isUninitialized, refetch]);\n\n  const [checkPermissions] = useLazyCheckPermissionsQuery();\n  const checkUserHasPermissions: AuthContextValue['checkUserHasPermissions'] = React.useCallback(\n    async (\n      permissions,\n      passedPermissions,\n      // TODO:\n      // Here we have parameterised checkUserHasPermissions in order to pass\n      // query context from elsewhere in the application.\n      // See packages/core/content-manager/admin/src/features/DocumentRBAC.tsx\n\n      // This is in order to calculate permissions on accurate query params.\n      // We should be able to rely on the query params in this provider\n      // If we need to pass additional context to the RBAC middleware\n      // we should define a better context type.\n      rawQueryContext\n    ) => {\n      /**\n       * If there's no permissions to check, then we allow it to\n       * pass to preserve existing behaviours.\n       *\n       * TODO: should we review this? it feels more dangerous than useful.\n       */\n      if (!permissions || permissions.length === 0) {\n        return [{ action: '', subject: '' }];\n      }\n\n      /**\n       * Given the provided permissions, return the permissions from either passedPermissions\n       * or userPermissions as this is expected to be the full permission entity.\n       */\n      const actualUserPermissions = passedPermissions ?? userPermissions;\n\n      const matchingPermissions = actualUserPermissions.filter(\n        (permission) =>\n          permissions.findIndex(\n            (perm) => perm.action === permission.action && perm.subject === permission.subject\n          ) >= 0\n      );\n\n      const middlewaredPermissions = await runRbacMiddleware(\n        {\n          user,\n          permissions: userPermissions,\n          pathname: location.pathname,\n          search: (rawQueryContext || rawQuery).split('?')[1] ?? '',\n        },\n        matchingPermissions\n      );\n\n      const shouldCheckConditions = middlewaredPermissions.some(\n        (perm) => Array.isArray(perm.conditions) && perm.conditions.length > 0\n      );\n\n      if (!shouldCheckConditions) {\n        return middlewaredPermissions;\n      }\n\n      const { data, error } = await checkPermissions({\n        permissions: middlewaredPermissions.map((perm) => ({\n          action: perm.action,\n          subject: perm.subject,\n        })),\n      });\n\n      if (error) {\n        throw error;\n      } else {\n        return middlewaredPermissions.filter((_, index) => data?.data[index] === true);\n      }\n    },\n    [checkPermissions, location.pathname, rawQuery, runRbacMiddleware, user, userPermissions]\n  );\n\n  const isLoading = isLoadingUser || isLoadingPermissions;\n\n  return (\n    <Provider\n      token={token}\n      user={user}\n      login={login}\n      logout={logout}\n      permissions={userPermissions}\n      checkUserHasPermissions={checkUserHasPermissions}\n      refetchPermissions={refetchPermissions}\n      isLoading={isLoading}\n    >\n      {children}\n    </Provider>\n  );\n};\n\nexport { AuthProvider, useAuth, STORAGE_KEYS };\nexport type { AuthContextValue, Permission, User };\n", "import * as React from 'react';\n\nimport { Alert, AlertVariant, Flex, useCallbackRef, Link } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\ninterface NotificationLink {\n  label: string;\n  target?: string;\n  url: string;\n}\n\ninterface NotificationConfig {\n  blockTransition?: boolean;\n  link?: NotificationLink;\n  message?: string;\n  onClose?: () => void;\n  timeout?: number;\n  title?: string;\n  type?: 'info' | 'warning' | 'danger' | 'success';\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Context\n * -----------------------------------------------------------------------------------------------*/\n\ninterface NotificationsContextValue {\n  /**\n   * Toggles a notification, wrapped in `useCallback` for a stable identity.\n   */\n  toggleNotification: (config: NotificationConfig) => void;\n}\n\nconst NotificationsContext = React.createContext<NotificationsContextValue>({\n  toggleNotification: () => {},\n});\n\n/* -------------------------------------------------------------------------------------------------\n * Provider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface NotificationsProviderProps {\n  children: React.ReactNode;\n}\ninterface Notification extends NotificationConfig {\n  id: number;\n}\n\n/**\n * @internal\n * @description DO NOT USE. This will be removed before stable release of v5.\n */\nconst NotificationsProvider = ({ children }: NotificationsProviderProps) => {\n  const notificationIdRef = React.useRef(0);\n\n  const [notifications, setNotifications] = React.useState<Notification[]>([]);\n\n  const toggleNotification = React.useCallback(\n    ({ type, message, link, timeout, blockTransition, onClose, title }: NotificationConfig) => {\n      setNotifications((s) => [\n        ...s,\n        {\n          id: notificationIdRef.current++,\n          type,\n          message,\n          link,\n          timeout,\n          blockTransition,\n          onClose,\n          title,\n        },\n      ]);\n    },\n    []\n  );\n\n  const clearNotification = React.useCallback((id: number) => {\n    setNotifications((s) => s.filter((n) => n.id !== id));\n  }, []);\n\n  const value = React.useMemo(() => ({ toggleNotification }), [toggleNotification]);\n\n  return (\n    <NotificationsContext.Provider value={value}>\n      <Flex\n        left=\"50%\"\n        marginLeft=\"-250px\"\n        position=\"fixed\"\n        direction=\"column\"\n        alignItems=\"stretch\"\n        gap={2}\n        top={`4.6rem`}\n        width={`50rem`}\n        zIndex=\"notification\"\n      >\n        {notifications.map((notification) => {\n          return (\n            <Notification\n              key={notification.id}\n              {...notification}\n              clearNotification={clearNotification}\n            />\n          );\n        })}\n      </Flex>\n      {children}\n    </NotificationsContext.Provider>\n  );\n};\n\ninterface NotificationProps extends Notification {\n  clearNotification: (id: number) => void;\n}\n\nconst Notification = ({\n  clearNotification,\n  blockTransition = false,\n  id,\n  link,\n  message,\n  onClose,\n  timeout = 2500,\n  title,\n  type,\n}: NotificationProps) => {\n  const { formatMessage } = useIntl();\n  /**\n   * Chances are `onClose` won't be classed as stabilised,\n   * so we use `useCallbackRef` to avoid make it stable.\n   */\n  const onCloseCallback = useCallbackRef(onClose);\n\n  const handleClose = React.useCallback(() => {\n    onCloseCallback();\n\n    clearNotification(id);\n  }, [clearNotification, id, onCloseCallback]);\n\n  // eslint-disable-next-line consistent-return\n  React.useEffect(() => {\n    if (!blockTransition) {\n      const timeoutReference = setTimeout(() => {\n        handleClose();\n      }, timeout);\n\n      return () => {\n        clearTimeout(timeoutReference);\n      };\n    }\n  }, [blockTransition, handleClose, timeout]);\n\n  let variant: AlertVariant;\n  let alertTitle: string;\n\n  if (type === 'info') {\n    variant = 'default';\n    alertTitle = formatMessage({\n      id: 'notification.default.title',\n      defaultMessage: 'Information:',\n    });\n  } else if (type === 'danger') {\n    variant = 'danger';\n    alertTitle = formatMessage({\n      id: 'notification.warning.title',\n      defaultMessage: 'Warning:',\n    });\n  } else if (type === 'warning') {\n    variant = 'warning';\n    alertTitle = formatMessage({\n      id: 'notification.warning.title',\n      defaultMessage: 'Warning:',\n    });\n  } else {\n    variant = 'success';\n    alertTitle = formatMessage({\n      id: 'notification.success.title',\n      defaultMessage: 'Success:',\n    });\n  }\n\n  if (title) {\n    alertTitle = title;\n  }\n\n  return (\n    <Alert\n      action={\n        link ? (\n          <Link href={link.url} isExternal>\n            {link.label}\n          </Link>\n        ) : undefined\n      }\n      onClose={handleClose}\n      closeLabel={formatMessage({\n        id: 'global.close',\n        defaultMessage: 'Close',\n      })}\n      title={alertTitle}\n      variant={variant}\n    >\n      {message}\n    </Alert>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Hook\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @preserve\n * @description Returns an object to interact with the notification\n * system. The callbacks are wrapped in `useCallback` for a stable\n * identity.\n *\n * @example\n * ```tsx\n * import { useNotification } from '@strapi/strapi/admin';\n *\n * const MyComponent = () => {\n *  const { toggleNotification } = useNotification();\n *\n *  return <button onClick={() => toggleNotification({ message: 'Hello world!' })}>Click me</button>;\n */\nconst useNotification = () => React.useContext(NotificationsContext);\n\nexport { NotificationsProvider, useNotification };\nexport type { NotificationConfig, NotificationsContextValue };\n", "/**\n * Prefix message with 'apiError.'\n */\nexport function getPrefixedId(message: string, callback?: (prefixedMessage: string) => string) {\n  const prefixedMessage = `apiError.${message}`;\n\n  // if a prefix function has been passed in it is used to\n  // prefix the id, e.g. to allow an error message to be\n  // set only for a localization namespace\n  if (typeof callback === 'function') {\n    return callback(prefixedMessage);\n  }\n\n  return prefixedMessage;\n}\n", "import { getPrefixedId } from './getPrefixedId';\n\nimport type { ApiError } from '../hooks/useAPIErrorHandler';\nimport type { FetchError } from '../utils/getFetchClient';\nimport type { errors } from '@strapi/utils';\n\nexport interface NormalizeErrorOptions {\n  name?: string;\n  intlMessagePrefixCallback?: (id: string) => string;\n}\n\ninterface NormalizeErrorReturn {\n  id: string;\n  defaultMessage: string;\n  name?: string;\n  values: Record<'path', string> | Record<string, never>;\n}\n\ninterface YupFormattedError {\n  path: string[];\n  message: string;\n  name: string;\n}\n\nfunction normalizeError(\n  error: ApiError | YupFormattedError,\n  { name, intlMessagePrefixCallback }: NormalizeErrorOptions\n): NormalizeErrorReturn {\n  const { message } = error;\n\n  const normalizedError = {\n    id: getPrefixedId(message, intlMessagePrefixCallback),\n    defaultMessage: message,\n    name: error.name ?? name,\n    values: {},\n  };\n\n  if ('path' in error) {\n    normalizedError.values = { path: error.path.join('.') };\n  }\n\n  return normalizedError;\n}\n\nconst validateErrorIsYupValidationError = (\n  err: ApiError\n): err is errors.YupValidationError & { details: { errors: YupFormattedError[] } } =>\n  typeof err.details === 'object' && err.details !== null && 'errors' in err.details;\n\n/**\n * Normalize the format of `ResponseError`\n * in places where the hook `useAPIErrorHandler` can not called\n * (e.g. outside of a React component).\n */\nexport function normalizeAPIError(\n  apiError: FetchError,\n  intlMessagePrefixCallback?: NormalizeErrorOptions['intlMessagePrefixCallback']\n):\n  | NormalizeErrorReturn\n  | { name: string; message: string | null; errors: NormalizeErrorReturn[] }\n  | null {\n  const error = apiError.response?.data?.error;\n\n  if (error) {\n    // some errors carry multiple errors (such as ValidationError)\n    if (validateErrorIsYupValidationError(error)) {\n      return {\n        name: error.name,\n        message: error?.message || null,\n        errors: error.details.errors.map((err) =>\n          normalizeError(err, { name: error.name, intlMessagePrefixCallback })\n        ),\n      };\n    }\n    return normalizeError(error, { intlMessagePrefixCallback });\n  }\n\n  return null;\n}\n", "import clone from 'lodash/clone';\nimport toPath from 'lodash/toPath';\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(obj: any, key: string | string[], def?: any, pathStartIndex: number = 0) {\n  const path = toPath(key);\n  while (obj && pathStartIndex < path.length) {\n    obj = obj[path[pathStartIndex++]];\n  }\n\n  // check if path is not in the end\n  if (pathStartIndex !== path.length && !obj) {\n    return def;\n  }\n\n  return obj === undefined ? def : obj;\n}\n\n/** @internal is the given object an Object? */\nexport const isObject = (obj: any): obj is object =>\n  obj !== null && typeof obj === 'object' && !Array.isArray(obj);\n\n/** @internal is the given object an integer? */\nexport const isInteger = (obj: any): boolean => String(Math.floor(Number(obj))) === obj;\n\n/**\n * Deeply set a value from in object via its path. If the value at `path`\n * has changed, return a shallow copy of obj with `value` set at `path`.\n * If `value` has not changed, return the original `obj`.\n *\n * Existing objects / arrays along `path` are also shallow copied. Sibling\n * objects along path retain the same internal js reference. Since new\n * objects / arrays are only created along `path`, we can test if anything\n * changed in a nested structure by comparing the object's reference in\n * the old and new object, similar to how russian doll cache invalidation\n * works.\n *\n * In earlier versions of this function, which used cloneDeep, there were\n * issues whereby settings a nested value would mutate the parent\n * instead of creating a new object. `clone` avoids that bug making a\n * shallow copy of the objects along the update path\n * so no object is mutated in place.\n *\n * Before changing this function, please read through the following\n * discussions.\n *\n * @see https://github.com/developit/linkstate\n * @see https://github.com/jaredpalmer/formik/pull/123\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  const res: any = clone(obj); // this keeps inheritance when obj is a class\n  let resVal: any = res;\n  let i = 0;\n  const pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    const currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n", "import * as React from 'react';\n\nimport { IntlFormatters, useIntl } from 'react-intl';\n\nimport { FetchError } from '../utils/getFetchClient';\nimport { getPrefixedId } from '../utils/getPrefixedId';\nimport { NormalizeErrorOptions, normalizeAPIError } from '../utils/normalizeAPIError';\nimport { setIn } from '../utils/objects';\n\nimport type { errors } from '@strapi/utils';\n\ntype ApiError =\n  | errors.ApplicationError\n  | errors.ForbiddenError\n  | errors.NotFoundError\n  | errors.NotImplementedError\n  | errors.PaginationError\n  | errors.PayloadTooLargeError\n  | errors.PolicyError\n  | errors.RateLimitError\n  | errors.UnauthorizedError\n  | errors.ValidationError\n  | errors.YupValidationError;\n\ninterface UnknownApiError {\n  /**\n   * The name of the ApiError, is always a static value.\n   */\n  name: 'UnknownError';\n  /**\n   * The error message.\n   */\n  message: string;\n  /**\n   * The error details.\n   */\n  details?: unknown;\n  /**\n   * The HTTP status code of the error.\n   */\n  status?: number;\n}\n\n/**\n * The last item is the fallback error SerializedError which\n * typically comes from redux-toolkit itself.\n */\ninterface SerializedError {\n  /**\n   * The name of the error.\n   */\n  name?: string;\n  /**\n   * The error message that explains what went wrong.\n   */\n  message?: string;\n  /**\n   * The stack trace of the error.\n   */\n  stack?: string;\n  /**\n   * A specific error code associated with the error.\n   */\n  code?: string;\n}\n\n/**\n * These are the types or errors we return\n * from the redux-toolkit data-fetching setup.\n */\ntype BaseQueryError = ApiError | UnknownApiError | SerializedError;\n\ninterface YupFormattedError {\n  /**\n   * An array representing the path to the field where the validation error occurred.\n   */\n  path: string[];\n  /**\n   * The error message describing the validation failure.\n   */\n  message: string;\n  /**\n   * The name of the error, typically identifies the type of validation error that occurred.\n   */\n  name: string;\n}\n\n/**\n * @public\n * @description The purpose of this hook is to offer a unified way to handle errors thrown by API endpoints, regardless of the type of error (`ValidationError`, `ApplicationErrror` ...)\nthat has been thrown.\n * @example\n * ```tsx\n * import * as React from 'react';\n * import { useFetchClient, useAPIErrorHandler, useNotification } from '@strapi/admin/admin';\n *\n * const MyComponent = () => {\n *   const { get } = useFetchClient();\n *   const { formatAPIError } = useAPIErrorHandler(getTrad);\n *   const { toggleNotification } = useNotification();\n *\n *   const handleDeleteItem = async () => {\n *     try {\n *       return await get('/admin');\n *     } catch (error) {\n *       toggleNotification({\n *         type: 'danger',\n *         message: formatAPIError(error),\n *       });\n *     }\n *   };\n *   return <button onClick={handleDeleteItem}>Delete item</button>;\n * };\n * ```\n */\nexport function useAPIErrorHandler(\n  intlMessagePrefixCallback?: FormatAPIErrorOptions['intlMessagePrefixCallback']\n) {\n  const { formatMessage } = useIntl();\n\n  /**\n   * @description This method try to normalize the passed error\n   * and then call formatAPIError to stringify the ResponseObject\n   * into a string. If it fails it will call formatFetchError and\n   * return the error message.\n   */\n  const formatError = React.useCallback(\n    (error: FetchError) => {\n      // Try to normalize the passed error first. This will fail for e.g. network\n      // errors which are thrown by fetchClient directly.\n      try {\n        const formattedErr = formatAPIError(error, { intlMessagePrefixCallback, formatMessage });\n\n        if (!formattedErr) {\n          return formatFetchError(error, { intlMessagePrefixCallback, formatMessage });\n        }\n\n        return formattedErr;\n      } catch (_) {\n        throw new Error('formatAPIError: Unknown error:', error);\n      }\n    },\n    [formatMessage, intlMessagePrefixCallback]\n  );\n\n  return {\n    /**\n     * @alpha\n     * Convert ValidationErrors from the API into an object that can be used by forms.\n     */\n    _unstableFormatValidationErrors: React.useCallback(\n      (error: Extract<BaseQueryError, { name: 'ValidationError' }>): Record<string, string> => {\n        if (typeof error.details === 'object' && error.details !== null) {\n          if ('errors' in error.details && Array.isArray(error.details.errors)) {\n            const validationErrors = error.details.errors as YupFormattedError[];\n\n            return validationErrors.reduce((acc, err) => {\n              const { path, message } = err;\n\n              return setIn(acc, path.join('.'), message);\n            }, {});\n          } else {\n            const details = error.details as Record<string, string[]>;\n\n            return Object.keys(details).reduce((acc, key) => {\n              const messages = details[key];\n\n              return {\n                ...acc,\n                [key]: messages.join(', '),\n              };\n            }, {});\n          }\n        } else {\n          return {};\n        }\n      },\n      []\n    ),\n    /**\n     * @alpha\n     * This handles the errors given from `redux-toolkit`'s axios based baseQuery function.\n     */\n    _unstableFormatAPIError: React.useCallback(\n      (error: BaseQueryError) => {\n        const err = {\n          response: {\n            data: {\n              error,\n            },\n          },\n        } as FetchError;\n\n        /**\n         * There's a chance with SerializedErrors that the message is not set.\n         * In that case we return a generic error message.\n         */\n        if (!error.message) {\n          return 'Unknown error occured.';\n        }\n\n        return formatError(err);\n      },\n      [formatError]\n    ),\n    formatAPIError: formatError,\n  };\n}\n\nfunction formatFetchError(\n  error: FetchError,\n  { intlMessagePrefixCallback, formatMessage }: FormatAPIErrorOptions\n) {\n  const { code, message } = error;\n\n  return formatMessage(\n    {\n      id: getPrefixedId(message, intlMessagePrefixCallback),\n      defaultMessage: message,\n    },\n    {\n      code,\n    }\n  );\n}\n\ntype FormatAPIErrorOptions = Partial<Pick<NormalizeErrorOptions, 'intlMessagePrefixCallback'>> &\n  Pick<IntlFormatters, 'formatMessage'>;\n\n/**\n * @description This method stringifies the `ResponseObject` into\n * a string. If multiple errors are thrown by the API, which\n * happens e.g.in the case of a `ValidationError`, all errors\n * will bo concatenated into a single string.\n */\nfunction formatAPIError(\n  error: FetchError,\n  { formatMessage, intlMessagePrefixCallback }: FormatAPIErrorOptions\n) {\n  if (!formatMessage) {\n    throw new Error('The formatMessage callback is a mandatory argument.');\n  }\n\n  const normalizedError = normalizeAPIError(error, intlMessagePrefixCallback);\n\n  if (!normalizedError) {\n    return null;\n  }\n\n  if ('message' in normalizedError && normalizedError.message !== null) {\n    return normalizedError.message;\n  }\n\n  // stringify multiple errors\n  if ('errors' in normalizedError) {\n    return normalizedError.errors\n      .map(({ id, defaultMessage, values }) => formatMessage({ id, defaultMessage }, values))\n      .join('\\n');\n  }\n\n  return formatMessage(normalizedError);\n}\n\nexport type { ApiError };\n", "import * as React from 'react';\n\nimport {\n  Box,\n  EmptyStateLayout,\n  type EmptyStateLayoutProps,\n  Flex,\n  Loader,\n  Main,\n  MainProps,\n} from '@strapi/design-system';\nimport { WarningCircle } from '@strapi/icons';\nimport { EmptyPermissions, EmptyDocuments } from '@strapi/icons/symbols';\nimport { useIntl } from 'react-intl';\n\nimport { useAuth, Permission } from '../features/Auth';\nimport { useNotification } from '../features/Notifications';\nimport { useAPIErrorHandler } from '../hooks/useAPIErrorHandler';\nimport { useCheckPermissionsQuery } from '../services/auth';\n\n/* -------------------------------------------------------------------------------------------------\n * Main\n * -----------------------------------------------------------------------------------------------*/\ninterface PageMainProps extends MainProps {\n  children: React.ReactNode;\n}\n\nconst PageMain = ({ children, ...restProps }: PageMainProps) => {\n  return <Main {...restProps}>{children}</Main>;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Loading\n * -----------------------------------------------------------------------------------------------*/\ninterface LoadingProps {\n  /**\n   * @default 'Loading content.'\n   */\n  children?: React.ReactNode;\n}\n\n/**\n * @public\n * @description A loading component that should be rendered as the page\n * whilst you load the content for the aforementioned page.\n */\nconst Loading = ({ children = 'Loading content.' }: LoadingProps) => {\n  return (\n    <PageMain height=\"100vh\" aria-busy={true}>\n      <Flex alignItems=\"center\" height=\"100%\" justifyContent=\"center\">\n        <Loader>{children}</Loader>\n      </Flex>\n    </PageMain>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Error\n * -----------------------------------------------------------------------------------------------*/\ninterface ErrorProps extends Partial<EmptyStateLayoutProps> {}\n\n/**\n * TODO: should we start passing our errors here so they're persisted on the screen?\n * This could follow something similar to how the global app error works...?\n */\n\n/**\n * @public\n * @description An error component that should be rendered as the page\n * when an error occurs.\n */\nconst Error = (props: ErrorProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <PageMain height=\"100%\">\n      <Flex alignItems=\"center\" height=\"100%\" justifyContent=\"center\">\n        <EmptyStateLayout\n          icon={<WarningCircle width=\"16rem\" />}\n          content={formatMessage({\n            id: 'anErrorOccurred',\n            defaultMessage: 'Woops! Something went wrong. Please, try again.',\n          })}\n          {...props}\n        />\n      </Flex>\n    </PageMain>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * NoPermissions\n * -----------------------------------------------------------------------------------------------*/\ninterface NoPermissionsProps extends Partial<EmptyStateLayoutProps> {}\n\n/**\n * @public\n * @description A component that should be rendered as the page\n * when the user does not have the permissions to access the content.\n * This component does not check any permissions, it's up to you to decide\n * when it should be rendered.\n */\nconst NoPermissions = (props: NoPermissionsProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <PageMain height=\"100%\">\n      <Flex alignItems=\"center\" height=\"100%\" justifyContent=\"center\">\n        <Box minWidth=\"50%\">\n          <EmptyStateLayout\n            icon={<EmptyPermissions width=\"16rem\" />}\n            content={formatMessage({\n              id: 'app.components.EmptyStateLayout.content-permissions',\n              defaultMessage: \"You don't have the permissions to access that content\",\n            })}\n            {...props}\n          />\n        </Box>\n      </Flex>\n    </PageMain>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * NoData\n * -----------------------------------------------------------------------------------------------*/\ninterface NoDataProps extends Partial<EmptyStateLayoutProps> {}\n\n/**\n * @public\n * @description A component that should be rendered as the page\n * when there is no data available to display.\n * This component does not check any permissions, it's up to you to decide\n * when it should be rendered.\n */\nconst NoData = (props: NoDataProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <PageMain height=\"100%\" background=\"neutral100\">\n      <Flex alignItems=\"center\" height=\"100%\" width=\"100%\" justifyContent=\"center\">\n        <Box minWidth=\"50%\">\n          <EmptyStateLayout\n            icon={<EmptyDocuments width=\"16rem\" />}\n            action={props.action}\n            content={formatMessage({\n              id: 'app.components.EmptyStateLayout.content-document',\n              defaultMessage: 'No content found',\n            })}\n            {...props}\n          />\n        </Box>\n      </Flex>\n    </PageMain>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Protect\n * -----------------------------------------------------------------------------------------------*/\nexport interface ProtectProps {\n  /**\n   * The children to render if the user has the required permissions.\n   * If providing a function, it will be called with an object containing\n   * the permissions the user has based on the array you passed to the component.\n   */\n  children: React.ReactNode | ((args: { permissions: Permission[] }) => React.ReactNode);\n  /**\n   * The permissions the user needs to have to access the content.\n   */\n  permissions?: Array<Omit<Partial<Permission>, 'action'> & Pick<Permission, 'action'>>;\n}\n\n/**\n * @public\n * @description A wrapper component that should be used to protect a page. It will check the permissions\n * you pass to it and render the children if the user has the required permissions. If a user does not have ALL\n * the required permissions, it will redirect the user to the home page. Whilst these checks happen it will render\n * the loading component and should the check fail it will render the error component with a notification.\n */\nconst Protect = ({ permissions = [], children }: ProtectProps) => {\n  const userPermissions = useAuth('Protect', (state) => state.permissions);\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const matchingPermissions = userPermissions.filter(\n    (permission) =>\n      permissions.findIndex(\n        (perm) => perm.action === permission.action && perm.subject === permission.subject\n      ) >= 0\n  );\n\n  const shouldCheckConditions = matchingPermissions.some(\n    (perm) => Array.isArray(perm.conditions) && perm.conditions.length > 0\n  );\n\n  const { isLoading, error, data } = useCheckPermissionsQuery(\n    {\n      permissions: matchingPermissions.map((perm) => ({\n        action: perm.action,\n        subject: perm.subject,\n      })),\n    },\n    {\n      skip: !shouldCheckConditions,\n    }\n  );\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (error) {\n    return <Error />;\n  }\n\n  const { data: permissionsData } = data || {};\n\n  const canAccess =\n    shouldCheckConditions && permissionsData\n      ? !permissionsData.includes(false)\n      : matchingPermissions.length > 0;\n\n  if (!canAccess) {\n    return <NoPermissions />;\n  }\n\n  return (\n    <>\n      {typeof children === 'function' ? children({ permissions: matchingPermissions }) : children}\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Title\n * -----------------------------------------------------------------------------------------------*/\nexport interface TitleProps {\n  children: string;\n}\n\n/**\n * @public\n * @description This component takes the children (must be a string) and sets\n * it as the title of the html.\n */\nconst Title = ({ children: title }: TitleProps) => {\n  React.useEffect(() => {\n    document.title = `${title} | Strapi`;\n  }, [title]);\n\n  return null;\n};\n\nconst Page = {\n  Error,\n  Loading,\n  NoPermissions,\n  Protect,\n  NoData,\n  Main: PageMain,\n  Title,\n};\n\nexport { Page };\nexport type { ErrorProps, LoadingProps, NoPermissionsProps, PageMainProps as MainProps };\n", "export const once = <TFunc extends (...args: any) => any>(fn: TFunc) => {\n  const func = fn;\n  let called = false;\n\n  if (typeof func !== 'function') {\n    throw new TypeError(`once requires a function parameter`);\n  }\n\n  return (...args: any) => {\n    if (!called && process.env.NODE_ENV === 'development') {\n      func(...args);\n      called = true;\n    }\n  };\n};\n", "const capitalise = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport { capitalise };\n", "import { useEffect, useRef } from 'react';\n\nexport const usePrev = <T>(value: T): T | undefined => {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n};\n", "import * as React from 'react';\n\nimport isEqual from 'lodash/isEqual';\n\nimport { useAuth, Permission } from '../features/Auth';\nimport { once } from '../utils/once';\nimport { capitalise } from '../utils/strings';\n\nimport { usePrev } from './usePrev';\n\ntype AllowedActions = Record<string, boolean>;\n\n/**\n * @public\n * @description This hooks takes an object or array of permissions (the latter preferred) and\n * runs through them to match against the current user's permissions as well as the RBAC middleware\n * system checking any conditions that may be present. It returns the filtered permissions as the complete\n * object from the API and a set of actions that can be performed. An action is derived from the last part\n * of the permission action e.g. `admin::roles.create` would be `canCreate`. If there's a hyphen in the action\n * this is removed and capitalised e.g `admin::roles.create-draft` would be `canCreateDraft`.\n * @example\n * ```tsx\n * import { Page, useRBAC } from '@strapi/strapi/admin'\n *\n * const MyProtectedPage = () => {\n *  const { allowedActions, isLoading, error, permissions } = useRBAC([{ action: 'admin::roles.create' }])\n *\n *  if(isLoading) {\n *    return <Page.Loading />\n *  }\n *\n *  if(error){\n *    return <Page.Error />\n *  }\n *\n *  if(!allowedActions.canCreate) {\n *    return null\n *  }\n *\n *  return <MyPage permissions={permissions} />\n * }\n * ```\n */\nconst useRBAC = (\n  permissionsToCheck: Record<string, Permission[]> | Permission[] = [],\n  passedPermissions?: Permission[],\n  rawQueryContext?: string\n): {\n  allowedActions: AllowedActions;\n  isLoading: boolean;\n  error?: unknown;\n  permissions: Permission[];\n} => {\n  const isLoadingAuth = useAuth('useRBAC', (state) => state.isLoading);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [error, setError] = React.useState<unknown>();\n  const [data, setData] = React.useState<Record<string, boolean>>();\n\n  const warnOnce = React.useMemo(() => once(console.warn), []);\n\n  const actualPermissionsToCheck: Permission[] = React.useMemo(() => {\n    if (Array.isArray(permissionsToCheck)) {\n      return permissionsToCheck;\n    } else {\n      warnOnce(\n        'useRBAC: The first argument should be an array of permissions, not an object. This will be deprecated in the future.'\n      );\n\n      return Object.values(permissionsToCheck).flat();\n    }\n  }, [permissionsToCheck, warnOnce]);\n\n  /**\n   * This is the default value we return until the queryResults[i].data\n   * are all resolved with data. This preserves the original behaviour.\n   */\n  const defaultAllowedActions = React.useMemo(() => {\n    return actualPermissionsToCheck.reduce<Record<string, boolean>>((acc, permission) => {\n      return {\n        ...acc,\n        [getActionName(permission)]: false,\n      };\n    }, {});\n  }, [actualPermissionsToCheck]);\n\n  const checkUserHasPermissions = useAuth('useRBAC', (state) => state.checkUserHasPermissions);\n\n  const permssionsChecked = usePrev(actualPermissionsToCheck);\n  const contextChecked = usePrev(rawQueryContext);\n\n  React.useEffect(() => {\n    if (\n      !isEqual(permssionsChecked, actualPermissionsToCheck) ||\n      // TODO: also run this when the query context changes\n      contextChecked !== rawQueryContext\n    ) {\n      setIsLoading(true);\n      setData(undefined);\n      setError(undefined);\n\n      checkUserHasPermissions(actualPermissionsToCheck, passedPermissions, rawQueryContext)\n        .then((res) => {\n          if (res) {\n            setData(\n              res.reduce<Record<string, boolean>>((acc, permission) => {\n                return {\n                  ...acc,\n                  [getActionName(permission)]: true,\n                };\n              }, {})\n            );\n          }\n        })\n        .catch((err) => {\n          setError(err);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [\n    actualPermissionsToCheck,\n    checkUserHasPermissions,\n    passedPermissions,\n    permissionsToCheck,\n    permssionsChecked,\n    contextChecked,\n    rawQueryContext,\n  ]);\n\n  /**\n   * This hook originally would not return allowedActions\n   * until all the checks were complete.\n   */\n  const allowedActions = Object.entries({\n    ...defaultAllowedActions,\n    ...data,\n  }).reduce((acc, [name, allowed]) => {\n    acc[`can${capitalise(name)}`] = allowed;\n\n    return acc;\n  }, {} as AllowedActions);\n\n  return {\n    allowedActions,\n    permissions: actualPermissionsToCheck,\n    isLoading: isLoading || isLoadingAuth,\n    error,\n  };\n};\n\nconst getActionName = (permission: Permission): string => {\n  const [action = ''] = permission.action.split('.').slice(-1);\n  return action.split('-').map(capitalise).join('');\n};\n\nexport { useRBAC };\nexport type { AllowedActions };\n", "import { createContext } from '../components/Context';\n\ninterface AppInfoContextValue {\n  autoReload?: boolean;\n  communityEdition?: boolean;\n  currentEnvironment?: string;\n  dependencies?: Record<string, string>;\n  latestStrapiReleaseTag?: string;\n  nodeVersion?: string;\n  projectId?: string | null;\n  shouldUpdateStrapi?: boolean;\n  strapiVersion?: string | null;\n  useYarn?: boolean;\n  userId?: string;\n}\n\nconst [AppInfoProvider, useAppInfo] = createContext<AppInfoContextValue>('AppInfo', {});\n\nexport { AppInfoProvider, useAppInfo };\n\nexport type { AppInfoContextValue };\n", "import * as React from 'react';\n\nimport axios, { AxiosResponse } from 'axios';\n\nimport { useInitQuery, useTelemetryPropertiesQuery } from '../services/admin';\n\nimport { useAppInfo } from './AppInfo';\nimport { useAuth } from './Auth';\n\nexport interface TelemetryProperties {\n  useTypescriptOnServer?: boolean;\n  useTypescriptOnAdmin?: boolean;\n  isHostedOnStrapiCloud?: boolean;\n  numberOfAllContentTypes?: number;\n  numberOfComponents?: number;\n  numberOfDynamicZones?: number;\n}\n\nexport interface TrackingContextValue {\n  uuid?: string | boolean;\n  telemetryProperties?: TelemetryProperties;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Context\n * -----------------------------------------------------------------------------------------------*/\n\nconst TrackingContext = React.createContext<TrackingContextValue>({\n  uuid: false,\n});\n\n/* -------------------------------------------------------------------------------------------------\n * Provider\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface TrackingProviderProps {\n  children: React.ReactNode;\n}\n\nconst TrackingProvider = ({ children }: TrackingProviderProps) => {\n  const token = useAuth('App', (state) => state.token);\n  const { data: initData } = useInitQuery();\n  const { uuid } = initData ?? {};\n\n  const { data } = useTelemetryPropertiesQuery(undefined, {\n    skip: !initData?.uuid || !token,\n  });\n\n  React.useEffect(() => {\n    if (uuid && data) {\n      const event = 'didInitializeAdministration';\n      try {\n        fetch('https://analytics.strapi.io/api/v2/track', {\n          method: 'POST',\n          body: JSON.stringify({\n            // This event is anonymous\n            event,\n            userId: '',\n            eventPropeties: {},\n            groupProperties: { ...data, projectId: uuid },\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n            'X-Strapi-Event': event,\n          },\n        });\n      } catch {\n        // silence is golden\n      }\n    }\n  }, [data, uuid]);\n\n  const value = React.useMemo(\n    () => ({\n      uuid,\n      telemetryProperties: data,\n    }),\n    [uuid, data]\n  );\n\n  return <TrackingContext.Provider value={value}>{children}</TrackingContext.Provider>;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Hook\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * We can group these events together because none have properties so there's no benefit\n * to having them as separate types.\n *\n * Meanwhile those with properties have different property shapes corresponding to the specific\n * event so understanding which properties go with which event is very helpful.\n */\ninterface EventWithoutProperties {\n  name:\n    | 'changeComponentsOrder'\n    | 'didAccessAuthenticatedAdministration'\n    | 'didAddComponentToDynamicZone'\n    | 'didBulkDeleteEntries'\n    | 'didNotBulkDeleteEntries'\n    | 'didChangeDisplayedFields'\n    | 'didCheckDraftRelations'\n    | 'didClickGuidedTourHomepageApiTokens'\n    | 'didClickGuidedTourHomepageContentManager'\n    | 'didClickGuidedTourHomepageContentTypeBuilder'\n    | 'didClickGuidedTourStep1CollectionType'\n    | 'didClickGuidedTourStep2ContentManager'\n    | 'didClickGuidedTourStep3ApiTokens'\n    | 'didClickonBlogSection'\n    | 'didClickonCodeExampleSection'\n    | 'didClickonReadTheDocumentationSection'\n    | 'didClickOnTryStrapiCloudSection'\n    | 'didClickonTutorialSection'\n    | 'didCreateGuidedTourCollectionType'\n    | 'didCreateGuidedTourEntry'\n    | 'didCreateNewRole'\n    | 'didCreateRole'\n    | 'didDeleteToken'\n    | 'didDuplicateRole'\n    | 'didEditEditSettings'\n    | 'didEditEmailTemplates'\n    | 'didEditFieldNameOnContentType'\n    | 'didEditListSettings'\n    | 'didEditMediaLibraryConfig'\n    | 'didEditNameOfContentType'\n    | 'didGenerateGuidedTourApiTokens'\n    | 'didGoToMarketplace'\n    | 'didLaunchGuidedtour'\n    | 'didMissMarketplacePlugin'\n    | 'didNotCreateFirstAdmin'\n    | 'didNotSaveComponent'\n    | 'didPluginLearnMore'\n    | 'didPublishEntry'\n    | 'didBulkPublishEntries'\n    | 'didNotBulkPublishEntries'\n    | 'didUnpublishEntry'\n    | 'didBulkUnpublishEntries'\n    | 'didNotBulkUnpublishEntries'\n    | 'didSaveComponent'\n    | 'didSaveContentType'\n    | 'didSearch'\n    | 'didSkipGuidedtour'\n    | 'didSubmitPlugin'\n    | 'didSubmitProvider'\n    | 'didUpdateConditions'\n    | 'didSelectAllMediaLibraryElements'\n    | 'didSelectContentTypeFieldSettings'\n    | 'didSelectContentTypeSettings'\n    | 'didEditAuthenticationProvider'\n    | 'hasClickedCTBAddFieldBanner'\n    | 'removeComponentFromDynamicZone'\n    | 'willAddMoreFieldToContentType'\n    | 'willBulkDeleteEntries'\n    | 'willBulkPublishEntries'\n    | 'willBulkUnpublishEntries'\n    | 'willChangeNumberOfEntriesPerPage'\n    | 'willCheckDraftRelations'\n    | 'willCreateComponent'\n    | 'willCreateComponentFromAttributesModal'\n    | 'willCreateContentType'\n    | 'willCreateFirstAdmin'\n    | 'willCreateNewRole'\n    | 'willCreateRole'\n    | 'willCreateSingleType'\n    | 'willCreateStage'\n    | 'willCreateWorkflow'\n    | 'willDeleteEntryFromList'\n    | 'willDeleteFieldOfContentType'\n    | 'willDuplicateRole'\n    | 'willEditEditLayout'\n    | 'willEditEmailTemplates'\n    | 'willEditEntryFromButton'\n    | 'willEditEntryFromList'\n    | 'willEditFieldOfContentType'\n    | 'willEditMediaLibraryConfig'\n    | 'willEditNameOfContentType'\n    | 'willEditNameOfSingleType'\n    | 'willEditAuthenticationProvider'\n    | 'willEditFieldNameOnContentType'\n    | 'willEditStage'\n    | 'willFilterEntries'\n    | 'willInstallPlugin'\n    | 'willPublishEntry'\n    | 'willUnpublishEntry'\n    | 'willSaveComponent'\n    | 'willSaveContentType'\n    | 'willSaveContentTypeLayout'\n    | 'willOpenPreview'\n    | 'didEditFieldNameOnContentType'\n    | 'didCreateRelease';\n  properties?: never;\n}\n\ninterface DidFilterMediaLibraryElementsEvent {\n  name: 'didFilterMediaLibraryElements';\n  properties: MediaEvents['properties'] & {\n    filter: string;\n  };\n}\n\ninterface DidSortMediaLibraryElementsEvent {\n  name: 'didSortMediaLibraryElements';\n  properties: MediaEvents['properties'] & {\n    sort: string;\n  };\n}\n\ninterface DidCropFileEvent {\n  name: 'didCropFile';\n  properties: MediaEvents['properties'] & {\n    duplicatedFile: null | boolean;\n  };\n}\n\ninterface DidSelectFile {\n  name: 'didSelectFile';\n  properties: MediaEvents['properties'] & {\n    source: 'url' | 'computer';\n  };\n}\n\ninterface DidEditMediaLibraryElementsEvent {\n  name: 'didEditMediaLibraryElements';\n  properties: MediaEvents['properties'] & {\n    type: string;\n    changeLocation: string | boolean;\n  };\n}\n\ninterface MediaEvents {\n  name:\n    | 'didSearchMediaLibraryElements'\n    | 'didReplaceMedia'\n    | 'didAddMediaLibraryFolders'\n    | 'willAddMediaLibraryAssets';\n  properties: {\n    location: string;\n  };\n}\n\ninterface DidSelectContentTypeFieldTypeEvent {\n  name: 'didSelectContentTypeFieldType';\n  properties: {\n    type?: string;\n  };\n}\n\ninterface DidChangeModeEvent {\n  name: 'didChangeMode';\n  properties: {\n    newMode: string;\n  };\n}\ninterface DidSubmitWithErrorsFirstAdminEvent {\n  name: 'didSubmitWithErrorsFirstAdmin';\n  properties: {\n    count: string;\n  };\n}\n\ninterface WillNavigateEvent {\n  name: 'willNavigate';\n  properties: {\n    from: string;\n    to: string;\n  };\n}\n\ninterface DidAccessTokenListEvent {\n  name: 'didAccessTokenList';\n  properties: {\n    tokenType: TokenEvents['properties']['tokenType'];\n    number: number;\n  };\n}\ninterface LogoEvent {\n  name: 'didChangeLogo' | 'didClickResetLogo';\n  properties: {\n    logo: 'menu' | 'auth';\n  };\n}\n\ninterface TokenEvents {\n  name:\n    | 'didCopyTokenKey'\n    | 'didAddTokenFromList'\n    | 'didEditTokenFromList'\n    | 'willAccessTokenList'\n    | 'willAddTokenFromList'\n    | 'willCreateToken'\n    | 'willDeleteToken'\n    | 'willEditToken'\n    | 'willEditTokenFromList';\n  properties: {\n    tokenType: 'api-token' | 'transfer-token';\n  };\n}\n\ninterface WillModifyTokenEvent {\n  name: 'didCreateToken' | 'didEditToken';\n  properties: {\n    tokenType: TokenEvents['properties']['tokenType'];\n    type: 'custom' | 'full-access' | 'read-only' | Array<'push' | 'pull' | 'push-pull'>;\n  };\n}\n\ninterface DeleteEntryEvents {\n  name: 'willDeleteEntry' | 'didDeleteEntry' | 'didNotDeleteEntry';\n  properties: {\n    status?: string;\n    error?: unknown;\n  };\n}\n\ninterface CreateEntryEvents {\n  name: 'willCreateEntry' | 'didCreateEntry' | 'didNotCreateEntry';\n  properties: {\n    status?: string;\n    error?: unknown;\n  };\n}\n\ninterface UpdateEntryEvents {\n  name: 'willEditEntry' | 'didEditEntry' | 'didNotEditEntry';\n  properties: {\n    status?: string;\n    error?: unknown;\n  };\n}\n\ninterface DidFilterEntriesEvent {\n  name: 'didFilterEntries';\n  properties: {\n    useRelation: boolean;\n  };\n}\n\ninterface DidPublishRelease {\n  name: 'didPublishRelease';\n  properties: {\n    totalEntries: number;\n    totalPublishedEntries: number;\n    totalUnpublishedEntries: number;\n  };\n}\n\ntype EventsWithProperties =\n  | CreateEntryEvents\n  | DidAccessTokenListEvent\n  | DidChangeModeEvent\n  | DidCropFileEvent\n  | DeleteEntryEvents\n  | DidEditMediaLibraryElementsEvent\n  | DidFilterMediaLibraryElementsEvent\n  | DidFilterEntriesEvent\n  | DidSelectContentTypeFieldTypeEvent\n  | DidSelectFile\n  | DidSortMediaLibraryElementsEvent\n  | DidSubmitWithErrorsFirstAdminEvent\n  | LogoEvent\n  | TokenEvents\n  | UpdateEntryEvents\n  | WillModifyTokenEvent\n  | WillNavigateEvent\n  | DidPublishRelease\n  | MediaEvents;\n\nexport type TrackingEvent = EventWithoutProperties | EventsWithProperties;\nexport interface UseTrackingReturn {\n  /**\n   * This type helps show all the available event names before you start typing,\n   * however autocomplete isn't great.\n   */\n  trackUsage<TEvent extends TrackingEvent>(\n    event: TEvent['name'],\n    properties: TEvent['properties']\n  ): Promise<null | AxiosResponse<string>>;\n  trackUsage<TEvent extends Extract<TrackingEvent, { properties?: never }>>(\n    event: TEvent['name'],\n    properties?: never\n  ): Promise<null | AxiosResponse<string>>;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  trackUsage<TEvent extends Extract<TrackingEvent, { properties: object }>>(\n    event: TEvent['name'],\n    properties: TEvent['properties']\n  ): Promise<null | AxiosResponse<string>>;\n}\n\n/**\n * @description Used to send amplitude events to the Strapi Tracking hub.\n *\n * @example\n * ```tsx\n * import { useTracking } from '@strapi/strapi/admin';\n *\n * const MyComponent = () => {\n *  const { trackUsage } = useTracking();\n *\n *  const handleClick = () => {\n *   trackUsage('my-event', { myProperty: 'myValue' });\n *  }\n *\n *  return <button onClick={handleClick}>Send Event</button>\n * }\n * ```\n */\nconst useTracking = (): UseTrackingReturn => {\n  const { uuid, telemetryProperties } = React.useContext(TrackingContext);\n  const userId = useAppInfo('useTracking', (state) => state.userId);\n  const trackUsage = React.useCallback(\n    async <TEvent extends TrackingEvent>(\n      event: TEvent['name'],\n      properties?: TEvent['properties']\n    ) => {\n      try {\n        if (uuid && !window.strapi.telemetryDisabled) {\n          const res = await axios.post<string>(\n            'https://analytics.strapi.io/api/v2/track',\n            {\n              event,\n              userId,\n              eventProperties: { ...properties },\n              userProperties: {},\n              groupProperties: {\n                ...telemetryProperties,\n                projectId: uuid,\n                projectType: window.strapi.projectType,\n              },\n            },\n            {\n              headers: {\n                'Content-Type': 'application/json',\n                'X-Strapi-Event': event,\n              },\n            }\n          );\n\n          return res;\n        }\n      } catch (err) {\n        // Silence is golden\n      }\n\n      return null;\n    },\n    [telemetryProperties, userId, uuid]\n  );\n\n  return { trackUsage };\n};\n\nexport { TrackingProvider, useTracking };\n", "import * as React from 'react';\n\nimport { createContext } from '@radix-ui/react-context';\nimport { useIntl } from 'react-intl';\n\nimport { UpdateProjectSettings } from '../../../shared/contracts/admin';\nimport { Page } from '../components/PageHelpers';\nimport { useTypedSelector } from '../core/store/hooks';\nimport { useAPIErrorHandler } from '../hooks/useAPIErrorHandler';\nimport { useRBAC } from '../hooks/useRBAC';\nimport {\n  ConfigurationLogo,\n  useInitQuery,\n  useProjectSettingsQuery,\n  useUpdateProjectSettingsMutation,\n} from '../services/admin';\n\nimport { useAuth } from './Auth';\nimport { useNotification } from './Notifications';\nimport { useTracking } from './Tracking';\n\nimport type { StrapiApp } from '../StrapiApp';\n\n/* -------------------------------------------------------------------------------------------------\n * Configuration Context\n * -----------------------------------------------------------------------------------------------*/\n\ninterface UpdateProjectSettingsBody {\n  authLogo:\n    | ((UpdateProjectSettings.Request['body']['authLogo'] | ConfigurationLogo['custom']) & {\n        rawFile?: File;\n      })\n    | null;\n  menuLogo:\n    | ((UpdateProjectSettings.Request['body']['menuLogo'] | ConfigurationLogo['custom']) & {\n        rawFile?: File;\n      })\n    | null;\n}\n\ninterface ConfigurationContextValue {\n  logos: {\n    auth: ConfigurationLogo;\n    menu: ConfigurationLogo;\n  };\n  showTutorials: boolean;\n  showReleaseNotification: boolean;\n  updateProjectSettings: (body: UpdateProjectSettingsBody) => Promise<void>;\n}\n\nconst [ConfigurationContextProvider, useConfiguration] =\n  createContext<ConfigurationContextValue>('ConfigurationContext');\n\n/* -------------------------------------------------------------------------------------------------\n * ConfigurationProvider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ConfigurationProviderProps {\n  children: React.ReactNode;\n  defaultAuthLogo: StrapiApp['configurations']['authLogo'];\n  defaultMenuLogo: StrapiApp['configurations']['menuLogo'];\n  showReleaseNotification?: boolean;\n  showTutorials?: boolean;\n}\n\nconst ConfigurationProvider = ({\n  children,\n  defaultAuthLogo,\n  defaultMenuLogo,\n  showReleaseNotification = false,\n  showTutorials = false,\n}: ConfigurationProviderProps) => {\n  const { trackUsage } = useTracking();\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.['project-settings']\n  );\n  const token = useAuth('ConfigurationProvider', (state) => state.token);\n\n  const {\n    allowedActions: { canRead },\n  } = useRBAC(permissions);\n\n  const {\n    data: { authLogo: customAuthLogo, menuLogo: customMenuLogo } = {},\n    error,\n    isLoading,\n  } = useInitQuery();\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'app.containers.App.notification.error.init' }),\n      });\n    }\n  }, [error, formatMessage, toggleNotification]);\n\n  const { data, isSuccess } = useProjectSettingsQuery(undefined, {\n    skip: !token || !canRead,\n  });\n\n  const [updateProjectSettingsMutation] = useUpdateProjectSettingsMutation();\n\n  const updateProjectSettings = React.useCallback(\n    async (body: UpdateProjectSettingsBody) => {\n      const formData = new FormData();\n\n      /**\n       * We either only send files or we send null values.\n       * Null removes the logo. If you don't want to effect\n       * an existing logo, don't send anything.\n       */\n      Object.entries(body).forEach(([key, value]) => {\n        if (value?.rawFile) {\n          formData.append(key, value.rawFile);\n        } else if (value === null) {\n          formData.append(key, JSON.stringify(value));\n        }\n      });\n\n      const res = await updateProjectSettingsMutation(formData);\n\n      if ('data' in res) {\n        const updatedMenuLogo = !!res.data.menuLogo && !!body.menuLogo?.rawFile;\n        const updatedAuthLogo = !!res.data.authLogo && !!body.authLogo?.rawFile;\n\n        if (updatedMenuLogo) {\n          trackUsage('didChangeLogo', {\n            logo: 'menu',\n          });\n        }\n\n        if (updatedAuthLogo) {\n          trackUsage('didChangeLogo', {\n            logo: 'auth',\n          });\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'app', defaultMessage: 'Saved' }),\n        });\n      } else {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n      }\n    },\n    [formatAPIError, formatMessage, toggleNotification, trackUsage, updateProjectSettingsMutation]\n  );\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <ConfigurationContextProvider\n      showReleaseNotification={showReleaseNotification}\n      showTutorials={showTutorials}\n      logos={{\n        menu: {\n          custom: isSuccess\n            ? data?.menuLogo\n            : {\n                url: customMenuLogo ?? '',\n              },\n          default: defaultMenuLogo,\n        },\n        auth: {\n          custom: isSuccess\n            ? data?.authLogo\n            : {\n                url: customAuthLogo ?? '',\n              },\n          default: defaultAuthLogo,\n        },\n      }}\n      updateProjectSettings={updateProjectSettings}\n    >\n      {children}\n    </ConfigurationContextProvider>\n  );\n};\n\nexport {\n  ConfigurationContextProvider as _internalConfigurationContextProvider,\n  ConfigurationProvider,\n  useConfiguration,\n};\nexport type {\n  ConfigurationProviderProps,\n  ConfigurationContextValue,\n  ConfigurationLogo,\n  UpdateProjectSettingsBody,\n};\n", "import * as React from 'react';\n\nimport { produce } from 'immer';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nconst GUIDED_TOUR_COMPLETED_STEPS = 'GUIDED_TOUR_COMPLETED_STEPS';\nconst GUIDED_TOUR_CURRENT_STEP = 'GUIDED_TOUR_CURRENT_STEP';\nconst GUIDED_TOUR_SKIPPED = 'GUIDED_TOUR_SKIPPED';\n\nconst GUIDED_TOUR_KEYS = {\n  GUIDED_TOUR_COMPLETED_STEPS,\n  GUIDED_TOUR_CURRENT_STEP,\n  GUIDED_TOUR_SKIPPED,\n} as const;\n\n/* -------------------------------------------------------------------------------------------------\n * GuidedTourProvider\n * -----------------------------------------------------------------------------------------------*/\n\nimport { createContext } from '../Context';\n\ntype SectionKey = keyof GuidedTourContextValue['guidedTourState'];\ntype StepKey = keyof GuidedTourContextValue['guidedTourState'][SectionKey];\ntype Step = `${SectionKey}.${StepKey}`;\ninterface GuidedTourContextValue {\n  currentStep: Step | null;\n  guidedTourState: {\n    contentTypeBuilder: {\n      create: boolean;\n      success: boolean;\n    };\n    contentManager: {\n      create: boolean;\n      success: boolean;\n    };\n    apiTokens: {\n      create: boolean;\n      success: boolean;\n    };\n  };\n  isGuidedTourVisible: boolean;\n  isSkipped: boolean;\n  setCurrentStep: (step: Step | null) => void | null;\n  setGuidedTourVisibility: (isVisible: boolean) => void;\n  setSkipped: (isSkipped: boolean) => void;\n  setStepState: (step: Step, state: boolean) => void;\n  startSection: (section: SectionKey) => void;\n}\n\nconst [GuidedTourProviderImpl, useGuidedTour] = createContext<GuidedTourContextValue>('GuidedTour');\n\ninterface GuidedTourProviderProps {\n  children: React.ReactNode;\n}\n\nconst GuidedTourProvider = ({ children }: GuidedTourProviderProps) => {\n  const [{ currentStep, guidedTourState, isGuidedTourVisible, isSkipped }, dispatch] =\n    React.useReducer(reducer, initialState, initialiseState);\n\n  const setCurrentStep = (step: SetCurrentStepAction['step']) => {\n    // if step is null it is intentional, we need to dispatch it\n    if (step !== null) {\n      const isStepAlreadyDone = get(guidedTourState, step);\n      const [sectionName, stepName] = step.split('.') as [SectionKey, StepKey];\n      const sectionArray = Object.entries(guidedTourState[sectionName]);\n\n      const currentStepIndex = sectionArray.findIndex(([key]) => key === stepName);\n      const previousSteps = sectionArray.slice(0, currentStepIndex);\n\n      const isStepToShow = previousSteps.every(([, sectionValue]) => sectionValue);\n\n      if (isStepAlreadyDone || isSkipped || !isStepToShow) {\n        return null;\n      }\n    }\n\n    window.localStorage.setItem(GUIDED_TOUR_CURRENT_STEP, JSON.stringify(null));\n\n    return dispatch({\n      type: 'SET_CURRENT_STEP',\n      step,\n    });\n  };\n\n  const setGuidedTourVisibility = (value: SetGuidedTourVisibilityAction['value']) => {\n    dispatch({\n      type: 'SET_GUIDED_TOUR_VISIBILITY',\n      value,\n    });\n  };\n\n  const setStepState = (currentStep: Step, value: SetStepStateAction['value']) => {\n    addCompletedStep(currentStep);\n\n    dispatch({\n      type: 'SET_STEP_STATE',\n      currentStep,\n      value,\n    });\n  };\n\n  const startSection = (sectionName: SectionKey) => {\n    const sectionSteps = guidedTourState[sectionName];\n\n    if (sectionSteps) {\n      const guidedTourArray = Object.entries(guidedTourState);\n\n      // Find current section position in the guidedTourArray\n      // Get only previous sections based on current section position\n      const currentSectionIndex = guidedTourArray.findIndex(([key]) => key === sectionName);\n      const previousSections = guidedTourArray.slice(0, currentSectionIndex);\n\n      // Check if every steps from previous section are done\n      const isSectionToShow = previousSections.every(([, sectionValue]) =>\n        Object.values(sectionValue).every(Boolean)\n      );\n\n      const [firstStep] = Object.keys(sectionSteps) as [StepKey];\n      const isFirstStepDone = sectionSteps[firstStep];\n\n      if (isSectionToShow && !currentStep && !isFirstStepDone) {\n        setCurrentStep(`${sectionName}.${firstStep}`);\n      }\n    }\n  };\n\n  const setSkipped = (value: SetSkippedAction['value']) => {\n    window.localStorage.setItem(GUIDED_TOUR_SKIPPED, JSON.stringify(value));\n\n    dispatch({\n      type: 'SET_SKIPPED',\n      value,\n    });\n  };\n\n  return (\n    <GuidedTourProviderImpl\n      guidedTourState={guidedTourState}\n      currentStep={currentStep}\n      setCurrentStep={setCurrentStep}\n      setGuidedTourVisibility={setGuidedTourVisibility}\n      setSkipped={setSkipped}\n      setStepState={setStepState}\n      startSection={startSection}\n      isGuidedTourVisible={isGuidedTourVisible}\n      isSkipped={isSkipped}\n    >\n      {children}\n    </GuidedTourProviderImpl>\n  );\n};\n\ntype State = Pick<\n  GuidedTourContextValue,\n  'guidedTourState' | 'currentStep' | 'isGuidedTourVisible' | 'isSkipped'\n>;\n\nconst initialState = {\n  currentStep: null,\n  guidedTourState: {\n    contentTypeBuilder: {\n      create: false,\n      success: false,\n    },\n    contentManager: {\n      create: false,\n      success: false,\n    },\n    apiTokens: {\n      create: false,\n      success: false,\n    },\n  },\n  isGuidedTourVisible: false,\n  isSkipped: false,\n} satisfies State;\n\ninterface SetCurrentStepAction {\n  type: 'SET_CURRENT_STEP';\n  step: Step | null;\n}\n\ninterface SetStepStateAction {\n  type: 'SET_STEP_STATE';\n  currentStep: Step;\n  value: boolean;\n}\n\ninterface SetSkippedAction {\n  type: 'SET_SKIPPED';\n  value: boolean;\n}\n\ninterface SetGuidedTourVisibilityAction {\n  type: 'SET_GUIDED_TOUR_VISIBILITY';\n  value: boolean;\n}\n\ntype Action =\n  | SetCurrentStepAction\n  | SetStepStateAction\n  | SetSkippedAction\n  | SetGuidedTourVisibilityAction;\n\nconst reducer: React.Reducer<State, Action> = (state: State = initialState, action: Action) =>\n  produce(state, (draftState) => {\n    switch (action.type) {\n      case 'SET_CURRENT_STEP': {\n        draftState.currentStep = action.step;\n        break;\n      }\n      case 'SET_STEP_STATE': {\n        const [section, step] = action.currentStep.split('.') as [SectionKey, StepKey];\n        draftState.guidedTourState[section][step] = action.value;\n        break;\n      }\n      case 'SET_SKIPPED': {\n        draftState.isSkipped = action.value;\n        break;\n      }\n      case 'SET_GUIDED_TOUR_VISIBILITY': {\n        draftState.isGuidedTourVisible = action.value;\n        break;\n      }\n      default: {\n        return draftState;\n      }\n    }\n  });\n\nconst initialiseState = (initialState: State) => {\n  const copyInitialState = { ...initialState };\n  const guidedTourLocaleStorage = JSON.parse(\n    window.localStorage.getItem(GUIDED_TOUR_COMPLETED_STEPS) ?? '[]'\n  );\n  const currentStepLocaleStorage = JSON.parse(\n    window.localStorage.getItem(GUIDED_TOUR_CURRENT_STEP) ?? 'null'\n  );\n  const skippedLocaleStorage = JSON.parse(\n    window.localStorage.getItem(GUIDED_TOUR_SKIPPED) ?? 'null'\n  );\n\n  if (Array.isArray(guidedTourLocaleStorage)) {\n    guidedTourLocaleStorage.forEach((step) => {\n      const [sectionName, stepName] = step.split('.');\n      set(copyInitialState, ['guidedTourState', sectionName, stepName], true);\n    });\n  }\n\n  // if current step when initializing mark it as done\n  if (currentStepLocaleStorage) {\n    const [sectionName, stepName] = currentStepLocaleStorage.split('.') as [SectionKey, StepKey];\n    set(copyInitialState, ['guidedTourState', sectionName, stepName], true);\n\n    addCompletedStep(currentStepLocaleStorage as Step);\n\n    window.localStorage.setItem(GUIDED_TOUR_CURRENT_STEP, JSON.stringify(null));\n  }\n\n  if (skippedLocaleStorage !== null) {\n    set(copyInitialState, 'isSkipped', skippedLocaleStorage);\n  }\n\n  return copyInitialState;\n};\n\n/**\n * @description Add a completed step to the local storage if it does not already exist.\n */\nconst addCompletedStep = (completedStep: Step) => {\n  const currentSteps = JSON.parse(window.localStorage.getItem(GUIDED_TOUR_COMPLETED_STEPS) ?? '[]');\n\n  if (!Array.isArray(currentSteps)) {\n    return;\n  }\n\n  const isAlreadyStored = currentSteps.includes(completedStep);\n\n  if (isAlreadyStored) {\n    return;\n  }\n\n  window.localStorage.setItem(\n    GUIDED_TOUR_COMPLETED_STEPS,\n    JSON.stringify([...currentSteps, completedStep])\n  );\n};\n\nexport { GuidedTourProvider, useGuidedTour, GuidedTourContextValue, GUIDED_TOUR_KEYS };\n", "import * as React from 'react';\n\nimport defaultsDeep from 'lodash/defaultsDeep';\nimport { IntlProvider } from 'react-intl';\n\nimport { useTypedSelector } from '../core/store/hooks';\n\n/* -------------------------------------------------------------------------------------------------\n * LanguageProvider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LanguageProviderProps {\n  children: React.ReactNode;\n  messages: Record<string, Record<string, string>>;\n}\n\nconst LanguageProvider = ({ children, messages }: LanguageProviderProps) => {\n  const locale = useTypedSelector((state) => state.admin_app.language.locale);\n  const appMessages = defaultsDeep(messages[locale], messages.en);\n\n  return (\n    <IntlProvider locale={locale} defaultLocale=\"en\" messages={appMessages} textComponent=\"span\">\n      {children}\n    </IntlProvider>\n  );\n};\n\nexport { LanguageProvider };\nexport type { LanguageProviderProps };\n", "import * as React from 'react';\n\nimport { DesignSystemProvider } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { DefaultTheme, createGlobalStyle } from 'styled-components';\n\nimport { useTypedSelector } from '../core/store/hooks';\nimport { setAvailableThemes } from '../reducer';\n\ninterface ThemeProps {\n  children: React.ReactNode;\n  themes: {\n    dark: DefaultTheme;\n    light: DefaultTheme;\n  };\n}\n\nconst Theme = ({ children, themes }: ThemeProps) => {\n  const { currentTheme } = useTypedSelector((state) => state.admin_app.theme);\n  const [systemTheme, setSystemTheme] = React.useState<'light' | 'dark'>();\n  const { locale } = useIntl();\n  const dispatch = useDispatch();\n\n  // Listen to changes in the system theme\n  React.useEffect(() => {\n    const themeWatcher = window.matchMedia('(prefers-color-scheme: dark)');\n    setSystemTheme(themeWatcher.matches ? 'dark' : 'light');\n\n    const listener = (event: MediaQueryListEvent) => {\n      setSystemTheme(event.matches ? 'dark' : 'light');\n    };\n    themeWatcher.addEventListener('change', listener);\n\n    // Remove listener on cleanup\n    return () => {\n      themeWatcher.removeEventListener('change', listener);\n    };\n  }, []);\n\n  React.useEffect(() => {\n    dispatch(setAvailableThemes(Object.keys(themes)));\n  }, [dispatch, themes]);\n\n  const computedThemeName = currentTheme === 'system' ? systemTheme : currentTheme;\n\n  return (\n    <DesignSystemProvider\n      locale={locale}\n      /**\n       * TODO: could we make this neater i.e. by setting up the context to throw\n       * if it can't find it, that way the type is always fully defined and we're\n       * not checking it all the time...\n       */\n      theme={themes?.[computedThemeName || 'light']}\n    >\n      {children}\n      <GlobalStyle />\n    </DesignSystemProvider>\n  );\n};\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.colors.neutral100};\n  }\n`;\n\nexport { Theme };\nexport type { ThemeProps };\n"],
  "mappings": "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",
  "names": ["permissions", "createContext", "Provider", "useContext", "STORAGE_KEYS", "reducer", "logoutAction", "loginAction", "login", "token", "logout", "toPath", "clone", "Error", "formatAPIError", "fn", "isEqual", "get", "currentStep", "initialState", "set", "defaultsDeep"]
}
